#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HeuristicLab.Services.Access.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HeuristicLab.ClientManagement")]
	public partial class AccessServiceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    partial void InsertResourceResourceGroup(ResourceResourceGroup instance);
    partial void UpdateResourceResourceGroup(ResourceResourceGroup instance);
    partial void DeleteResourceResourceGroup(ResourceResourceGroup instance);
    partial void InsertClientLog(ClientLog instance);
    partial void UpdateClientLog(ClientLog instance);
    partial void DeleteClientLog(ClientLog instance);
    partial void InsertClientError(ClientError instance);
    partial void UpdateClientError(ClientError instance);
    partial void DeleteClientError(ClientError instance);
    partial void InsertUserGroupBase(UserGroupBase instance);
    partial void UpdateUserGroupBase(UserGroupBase instance);
    partial void DeleteUserGroupBase(UserGroupBase instance);
    partial void InsertClientType(ClientType instance);
    partial void UpdateClientType(ClientType instance);
    partial void DeleteClientType(ClientType instance);
    partial void InsertOperatingSystem(OperatingSystem instance);
    partial void UpdateOperatingSystem(OperatingSystem instance);
    partial void DeleteOperatingSystem(OperatingSystem instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertClientConfiguration(ClientConfiguration instance);
    partial void UpdateClientConfiguration(ClientConfiguration instance);
    partial void DeleteClientConfiguration(ClientConfiguration instance);
    partial void InsertPlugin(Plugin instance);
    partial void UpdatePlugin(Plugin instance);
    partial void DeletePlugin(Plugin instance);
    partial void InsertResourcePlugin(ResourcePlugin instance);
    partial void UpdateResourcePlugin(ResourcePlugin instance);
    partial void DeleteResourcePlugin(ResourcePlugin instance);
    partial void InsertUserGroupUserGroup(UserGroupUserGroup instance);
    partial void UpdateUserGroupUserGroup(UserGroupUserGroup instance);
    partial void DeleteUserGroupUserGroup(UserGroupUserGroup instance);
    #endregion
		
		public AccessServiceDataContext() : 
				base(global::HeuristicLab.Services.Access.DataAccess.Properties.Settings.Default.HeuristicLab_ClientManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AccessServiceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccessServiceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccessServiceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccessServiceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		public System.Data.Linq.Table<ResourceResourceGroup> ResourceResourceGroups
		{
			get
			{
				return this.GetTable<ResourceResourceGroup>();
			}
		}
		
		public System.Data.Linq.Table<ClientLog> ClientLogs
		{
			get
			{
				return this.GetTable<ClientLog>();
			}
		}
		
		public System.Data.Linq.Table<ClientError> ClientErrors
		{
			get
			{
				return this.GetTable<ClientError>();
			}
		}
		
		public System.Data.Linq.Table<UserGroupBase> UserGroupBases
		{
			get
			{
				return this.GetTable<UserGroupBase>();
			}
		}
		
		public System.Data.Linq.Table<ClientType> ClientTypes
		{
			get
			{
				return this.GetTable<ClientType>();
			}
		}
		
		public System.Data.Linq.Table<OperatingSystem> OperatingSystems
		{
			get
			{
				return this.GetTable<OperatingSystem>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<ClientConfiguration> ClientConfigurations
		{
			get
			{
				return this.GetTable<ClientConfiguration>();
			}
		}
		
		public System.Data.Linq.Table<Plugin> Plugins
		{
			get
			{
				return this.GetTable<Plugin>();
			}
		}
		
		public System.Data.Linq.Table<ResourcePlugin> ResourcePlugins
		{
			get
			{
				return this.GetTable<ResourcePlugin>();
			}
		}
		
		public System.Data.Linq.Table<UserGroupUserGroup> UserGroupUserGroups
		{
			get
			{
				return this.GetTable<UserGroupUserGroup>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Resource")]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="Resource", Type=typeof(Resource), IsDefault=true)]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="Client", Type=typeof(Client))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="ClientGroup", Type=typeof(ClientGroup))]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Description;
		
		private string _Type;
		
		private EntitySet<ResourceResourceGroup> _ResourceResourceGroups;
		
		private EntitySet<ResourceResourceGroup> _ResourceResourceGroups1;
		
		private EntitySet<ClientLog> _ClientLogs;
		
		private EntitySet<ResourcePlugin> _ResourcePlugins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Resource()
		{
			this._ResourceResourceGroups = new EntitySet<ResourceResourceGroup>(new Action<ResourceResourceGroup>(this.attach_ResourceResourceGroups), new Action<ResourceResourceGroup>(this.detach_ResourceResourceGroups));
			this._ResourceResourceGroups1 = new EntitySet<ResourceResourceGroup>(new Action<ResourceResourceGroup>(this.attach_ResourceResourceGroups1), new Action<ResourceResourceGroup>(this.detach_ResourceResourceGroups1));
			this._ClientLogs = new EntitySet<ClientLog>(new Action<ClientLog>(this.attach_ClientLogs), new Action<ClientLog>(this.detach_ClientLogs));
			this._ResourcePlugins = new EntitySet<ResourcePlugin>(new Action<ResourcePlugin>(this.attach_ResourcePlugins), new Action<ResourcePlugin>(this.detach_ResourcePlugins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, IsDiscriminator=true)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceResourceGroup", Storage="_ResourceResourceGroups", ThisKey="Id", OtherKey="ResourceGroupId")]
		public EntitySet<ResourceResourceGroup> ResourceResourceGroupsChilds
		{
			get
			{
				return this._ResourceResourceGroups;
			}
			set
			{
				this._ResourceResourceGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceResourceGroup1", Storage="_ResourceResourceGroups1", ThisKey="Id", OtherKey="ResourceId")]
		public EntitySet<ResourceResourceGroup> ResourceResourceGroupsParents
		{
			get
			{
				return this._ResourceResourceGroups1;
			}
			set
			{
				this._ResourceResourceGroups1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ClientLog", Storage="_ClientLogs", ThisKey="Id", OtherKey="ResourceId")]
		public EntitySet<ClientLog> ClientLogs
		{
			get
			{
				return this._ClientLogs;
			}
			set
			{
				this._ClientLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourcePlugin", Storage="_ResourcePlugins", ThisKey="Id", OtherKey="ResourceId")]
		public EntitySet<ResourcePlugin> ResourcePlugins
		{
			get
			{
				return this._ResourcePlugins;
			}
			set
			{
				this._ResourcePlugins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceResourceGroups(ResourceResourceGroup entity)
		{
			this.SendPropertyChanging();
			entity.ParentResource = this;
		}
		
		private void detach_ResourceResourceGroups(ResourceResourceGroup entity)
		{
			this.SendPropertyChanging();
			entity.ParentResource = null;
		}
		
		private void attach_ResourceResourceGroups1(ResourceResourceGroup entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_ResourceResourceGroups1(ResourceResourceGroup entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
		
		private void attach_ClientLogs(ClientLog entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_ClientLogs(ClientLog entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
		
		private void attach_ResourcePlugins(ResourcePlugin entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_ResourcePlugins(ResourcePlugin entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
	}
	
	public partial class Client : Resource
	{
		
		private string _HeuristicLabVersion;
		
		private System.Nullable<int> _MemorySize;
		
		private System.Nullable<System.DateTime> _Timestamp;
		
		private System.Nullable<int> _NumberOfCores;
		
		private string _ProcessorType;
		
		private System.Nullable<System.Guid> _ClientTypeId;
		
		private System.Nullable<System.Guid> _OperatingSystemId;
		
		private System.Nullable<System.Guid> _ClientConfigurationId;
		
		private System.Nullable<System.Guid> _CountryId;
		
		private System.Nullable<double> _PerformanceValue;
		
		private EntityRef<ClientType> _ClientType;
		
		private EntityRef<OperatingSystem> _OperatingSystem;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<ClientConfiguration> _ClientConfiguration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHeuristicLabVersionChanging(string value);
    partial void OnHeuristicLabVersionChanged();
    partial void OnMemorySizeChanging(System.Nullable<int> value);
    partial void OnMemorySizeChanged();
    partial void OnTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimestampChanged();
    partial void OnNumberOfCoresChanging(System.Nullable<int> value);
    partial void OnNumberOfCoresChanged();
    partial void OnProcessorTypeChanging(string value);
    partial void OnProcessorTypeChanged();
    partial void OnClientTypeIdChanging(System.Nullable<System.Guid> value);
    partial void OnClientTypeIdChanged();
    partial void OnOperatingSystemIdChanging(System.Nullable<System.Guid> value);
    partial void OnOperatingSystemIdChanged();
    partial void OnClientConfigurationIdChanging(System.Nullable<System.Guid> value);
    partial void OnClientConfigurationIdChanged();
    partial void OnCountryIdChanging(System.Nullable<System.Guid> value);
    partial void OnCountryIdChanged();
    partial void OnPerformanceValueChanging(System.Nullable<double> value);
    partial void OnPerformanceValueChanged();
    #endregion
		
		public Client()
		{
			this._ClientType = default(EntityRef<ClientType>);
			this._OperatingSystem = default(EntityRef<OperatingSystem>);
			this._Country = default(EntityRef<Country>);
			this._ClientConfiguration = default(EntityRef<ClientConfiguration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeuristicLabVersion", DbType="NVarChar(MAX)")]
		public string HeuristicLabVersion
		{
			get
			{
				return this._HeuristicLabVersion;
			}
			set
			{
				if ((this._HeuristicLabVersion != value))
				{
					this.OnHeuristicLabVersionChanging(value);
					this.SendPropertyChanging();
					this._HeuristicLabVersion = value;
					this.SendPropertyChanged("HeuristicLabVersion");
					this.OnHeuristicLabVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemorySize", DbType="Int")]
		public System.Nullable<int> MemorySize
		{
			get
			{
				return this._MemorySize;
			}
			set
			{
				if ((this._MemorySize != value))
				{
					this.OnMemorySizeChanging(value);
					this.SendPropertyChanging();
					this._MemorySize = value;
					this.SendPropertyChanged("MemorySize");
					this.OnMemorySizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfCores", DbType="Int")]
		public System.Nullable<int> NumberOfCores
		{
			get
			{
				return this._NumberOfCores;
			}
			set
			{
				if ((this._NumberOfCores != value))
				{
					this.OnNumberOfCoresChanging(value);
					this.SendPropertyChanging();
					this._NumberOfCores = value;
					this.SendPropertyChanged("NumberOfCores");
					this.OnNumberOfCoresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessorType", DbType="NVarChar(MAX)")]
		public string ProcessorType
		{
			get
			{
				return this._ProcessorType;
			}
			set
			{
				if ((this._ProcessorType != value))
				{
					this.OnProcessorTypeChanging(value);
					this.SendPropertyChanging();
					this._ProcessorType = value;
					this.SendPropertyChanged("ProcessorType");
					this.OnProcessorTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientTypeId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ClientTypeId
		{
			get
			{
				return this._ClientTypeId;
			}
			set
			{
				if ((this._ClientTypeId != value))
				{
					if (this._ClientType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ClientTypeId = value;
					this.SendPropertyChanged("ClientTypeId");
					this.OnClientTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatingSystemId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OperatingSystemId
		{
			get
			{
				return this._OperatingSystemId;
			}
			set
			{
				if ((this._OperatingSystemId != value))
				{
					if (this._OperatingSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperatingSystemIdChanging(value);
					this.SendPropertyChanging();
					this._OperatingSystemId = value;
					this.SendPropertyChanged("OperatingSystemId");
					this.OnOperatingSystemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientConfigurationId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ClientConfigurationId
		{
			get
			{
				return this._ClientConfigurationId;
			}
			set
			{
				if ((this._ClientConfigurationId != value))
				{
					if (this._ClientConfiguration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientConfigurationIdChanging(value);
					this.SendPropertyChanging();
					this._ClientConfigurationId = value;
					this.SendPropertyChanged("ClientConfigurationId");
					this.OnClientConfigurationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerformanceValue", DbType="real")]
		public System.Nullable<double> PerformanceValue
		{
			get
			{
				return this._PerformanceValue;
			}
			set
			{
				if ((this._PerformanceValue != value))
				{
					this.OnPerformanceValueChanging(value);
					this.SendPropertyChanging();
					this._PerformanceValue = value;
					this.SendPropertyChanged("PerformanceValue");
					this.OnPerformanceValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientType_Client", Storage="_ClientType", ThisKey="ClientTypeId", OtherKey="Id", IsForeignKey=true)]
		public ClientType ClientType
		{
			get
			{
				return this._ClientType.Entity;
			}
			set
			{
				if ((this._ClientType.Entity != value))
				{
					this.SendPropertyChanging();
					this._ClientType.Entity = value;
					this.SendPropertyChanged("ClientType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperatingSystem_Client", Storage="_OperatingSystem", ThisKey="OperatingSystemId", OtherKey="Id", IsForeignKey=true)]
		public OperatingSystem OperatingSystem
		{
			get
			{
				return this._OperatingSystem.Entity;
			}
			set
			{
				if ((this._OperatingSystem.Entity != value))
				{
					this.SendPropertyChanging();
					this._OperatingSystem.Entity = value;
					this.SendPropertyChanged("OperatingSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Client", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				if ((this._Country.Entity != value))
				{
					this.SendPropertyChanging();
					this._Country.Entity = value;
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientConfiguration_Client", Storage="_ClientConfiguration", ThisKey="ClientConfigurationId", OtherKey="Id", IsForeignKey=true)]
		public ClientConfiguration ClientConfiguration
		{
			get
			{
				return this._ClientConfiguration.Entity;
			}
			set
			{
				if ((this._ClientConfiguration.Entity != value))
				{
					this.SendPropertyChanging();
					this._ClientConfiguration.Entity = value;
					this.SendPropertyChanged("ClientConfiguration");
				}
			}
		}
	}
	
	public partial class ClientGroup : Resource
	{
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public ClientGroup()
		{
			OnCreated();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceResourceGroup")]
	public partial class ResourceResourceGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ResourceId;
		
		private System.Guid _ResourceGroupId;
		
		private EntityRef<Resource> _Resource;
		
		private EntityRef<Resource> _Resource1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIdChanging(System.Guid value);
    partial void OnResourceIdChanged();
    partial void OnResourceGroupIdChanging(System.Guid value);
    partial void OnResourceGroupIdChanged();
    #endregion
		
		public ResourceResourceGroup()
		{
			this._Resource = default(EntityRef<Resource>);
			this._Resource1 = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					if (this._Resource1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceGroupId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ResourceGroupId
		{
			get
			{
				return this._ResourceGroupId;
			}
			set
			{
				if ((this._ResourceGroupId != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceGroupId = value;
					this.SendPropertyChanged("ResourceGroupId");
					this.OnResourceGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceResourceGroup", Storage="_Resource", ThisKey="ResourceGroupId", OtherKey="Id", IsForeignKey=true)]
		public Resource ParentResource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.ResourceResourceGroupsChilds.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.ResourceResourceGroupsChilds.Add(this);
						this._ResourceGroupId = value.Id;
					}
					else
					{
						this._ResourceGroupId = default(System.Guid);
					}
					this.SendPropertyChanged("ParentResource");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceResourceGroup1", Storage="_Resource1", ThisKey="ResourceId", OtherKey="Id", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource1.Entity;
			}
			set
			{
				Resource previousValue = this._Resource1.Entity;
				if (((previousValue != value) 
							|| (this._Resource1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource1.Entity = null;
						previousValue.ResourceResourceGroupsParents.Remove(this);
					}
					this._Resource1.Entity = value;
					if ((value != null))
					{
						value.ResourceResourceGroupsParents.Add(this);
						this._ResourceId = value.Id;
					}
					else
					{
						this._ResourceId = default(System.Guid);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientLog")]
	public partial class ClientLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Timestamp;
		
		private System.Guid _ResourceId;
		
		private string _Message;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnResourceIdChanging(System.Guid value);
    partial void OnResourceIdChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public ClientLog()
		{
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ClientLog", Storage="_Resource", ThisKey="ResourceId", OtherKey="Id", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.ClientLogs.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.ClientLogs.Add(this);
						this._ResourceId = value.Id;
					}
					else
					{
						this._ResourceId = default(System.Guid);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientError")]
	public partial class ClientError : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _Timestamp;
		
		private string _Exception;
		
		private string _UserComment;
		
		private string _ConfigDump;
		
		private System.Nullable<System.Guid> _ClientId;
		
		private System.Nullable<System.Guid> _UserId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnExceptionChanging(string value);
    partial void OnExceptionChanged();
    partial void OnUserCommentChanging(string value);
    partial void OnUserCommentChanged();
    partial void OnConfigDumpChanging(string value);
    partial void OnConfigDumpChanged();
    partial void OnClientIdChanging(System.Nullable<System.Guid> value);
    partial void OnClientIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    #endregion
		
		public ClientError()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exception", DbType="NVarChar(MAX)")]
		public string Exception
		{
			get
			{
				return this._Exception;
			}
			set
			{
				if ((this._Exception != value))
				{
					this.OnExceptionChanging(value);
					this.SendPropertyChanging();
					this._Exception = value;
					this.SendPropertyChanged("Exception");
					this.OnExceptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserComment", DbType="NVarChar(MAX)")]
		public string UserComment
		{
			get
			{
				return this._UserComment;
			}
			set
			{
				if ((this._UserComment != value))
				{
					this.OnUserCommentChanging(value);
					this.SendPropertyChanging();
					this._UserComment = value;
					this.SendPropertyChanged("UserComment");
					this.OnUserCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigDump", DbType="NVarChar(MAX)")]
		public string ConfigDump
		{
			get
			{
				return this._ConfigDump;
			}
			set
			{
				if ((this._ConfigDump != value))
				{
					this.OnConfigDumpChanging(value);
					this.SendPropertyChanging();
					this._ConfigDump = value;
					this.SendPropertyChanged("ConfigDump");
					this.OnConfigDumpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroup")]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="UserGroupBase", Type=typeof(UserGroupBase), IsDefault=true)]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="User", Type=typeof(User))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="UserGroup", Type=typeof(UserGroup))]
	public partial class UserGroupBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Type;
		
		private EntitySet<UserGroupUserGroup> _UserGroupUserGroups;
		
		private EntitySet<UserGroupUserGroup> _UserGroupUserGroups1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public UserGroupBase()
		{
			this._UserGroupUserGroups = new EntitySet<UserGroupUserGroup>(new Action<UserGroupUserGroup>(this.attach_UserGroupUserGroups), new Action<UserGroupUserGroup>(this.detach_UserGroupUserGroups));
			this._UserGroupUserGroups1 = new EntitySet<UserGroupUserGroup>(new Action<UserGroupUserGroup>(this.attach_UserGroupUserGroups1), new Action<UserGroupUserGroup>(this.detach_UserGroupUserGroups1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsDiscriminator=true)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupBase_UserGroupUserGroup", Storage="_UserGroupUserGroups", ThisKey="Id", OtherKey="UserGroupId")]
		public EntitySet<UserGroupUserGroup> UserGroupUserGroupsChilds
		{
			get
			{
				return this._UserGroupUserGroups;
			}
			set
			{
				this._UserGroupUserGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupBase_UserGroupUserGroup1", Storage="_UserGroupUserGroups1", ThisKey="Id", OtherKey="UserGroupUserGroupId")]
		public EntitySet<UserGroupUserGroup> UserGroupUserGroupsParents
		{
			get
			{
				return this._UserGroupUserGroups1;
			}
			set
			{
				this._UserGroupUserGroups1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroupUserGroups(UserGroupUserGroup entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = this;
		}
		
		private void detach_UserGroupUserGroups(UserGroupUserGroup entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = null;
		}
		
		private void attach_UserGroupUserGroups1(UserGroupUserGroup entity)
		{
			this.SendPropertyChanging();
			entity.UserGroupBase = this;
		}
		
		private void detach_UserGroupUserGroups1(UserGroupUserGroup entity)
		{
			this.SendPropertyChanging();
			entity.UserGroupBase = null;
		}
	}
	
	public partial class User : UserGroupBase
	{
		
		private string _FullName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(MAX)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
	}
	
	public partial class UserGroup : UserGroupBase
	{
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public UserGroup()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientType")]
	public partial class ClientType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ClientType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperatingSystem")]
	public partial class OperatingSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public OperatingSystem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientConfiguration")]
	public partial class ClientConfiguration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Hash;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnHashChanging(string value);
    partial void OnHashChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ClientConfiguration()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hash", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Plugin")]
	public partial class Plugin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _StrongName;
		
		private string _Version;
		
		private EntitySet<ResourcePlugin> _ResourcePlugins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStrongNameChanging(string value);
    partial void OnStrongNameChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    #endregion
		
		public Plugin()
		{
			this._ResourcePlugins = new EntitySet<ResourcePlugin>(new Action<ResourcePlugin>(this.attach_ResourcePlugins), new Action<ResourcePlugin>(this.detach_ResourcePlugins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrongName", DbType="NVarChar(MAX)")]
		public string StrongName
		{
			get
			{
				return this._StrongName;
			}
			set
			{
				if ((this._StrongName != value))
				{
					this.OnStrongNameChanging(value);
					this.SendPropertyChanging();
					this._StrongName = value;
					this.SendPropertyChanged("StrongName");
					this.OnStrongNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plugin_ResourcePlugin", Storage="_ResourcePlugins", ThisKey="Id", OtherKey="PluginId")]
		public EntitySet<ResourcePlugin> ResourcePlugins
		{
			get
			{
				return this._ResourcePlugins;
			}
			set
			{
				this._ResourcePlugins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourcePlugins(ResourcePlugin entity)
		{
			this.SendPropertyChanging();
			entity.Plugin = this;
		}
		
		private void detach_ResourcePlugins(ResourcePlugin entity)
		{
			this.SendPropertyChanging();
			entity.Plugin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourcePlugin")]
	public partial class ResourcePlugin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ResourceId;
		
		private System.Guid _PluginId;
		
		private EntityRef<Plugin> _Plugin;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIdChanging(System.Guid value);
    partial void OnResourceIdChanged();
    partial void OnPluginIdChanging(System.Guid value);
    partial void OnPluginIdChanged();
    #endregion
		
		public ResourcePlugin()
		{
			this._Plugin = default(EntityRef<Plugin>);
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PluginId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PluginId
		{
			get
			{
				return this._PluginId;
			}
			set
			{
				if ((this._PluginId != value))
				{
					if (this._Plugin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPluginIdChanging(value);
					this.SendPropertyChanging();
					this._PluginId = value;
					this.SendPropertyChanged("PluginId");
					this.OnPluginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plugin_ResourcePlugin", Storage="_Plugin", ThisKey="PluginId", OtherKey="Id", IsForeignKey=true)]
		public Plugin Plugin
		{
			get
			{
				return this._Plugin.Entity;
			}
			set
			{
				Plugin previousValue = this._Plugin.Entity;
				if (((previousValue != value) 
							|| (this._Plugin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plugin.Entity = null;
						previousValue.ResourcePlugins.Remove(this);
					}
					this._Plugin.Entity = value;
					if ((value != null))
					{
						value.ResourcePlugins.Add(this);
						this._PluginId = value.Id;
					}
					else
					{
						this._PluginId = default(System.Guid);
					}
					this.SendPropertyChanged("Plugin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourcePlugin", Storage="_Resource", ThisKey="ResourceId", OtherKey="Id", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.ResourcePlugins.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.ResourcePlugins.Add(this);
						this._ResourceId = value.Id;
					}
					else
					{
						this._ResourceId = default(System.Guid);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroupUserGroup")]
	public partial class UserGroupUserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserGroupId;
		
		private System.Guid _UserGroupUserGroupId;
		
		private EntityRef<UserGroupBase> _UserGroup;
		
		private EntityRef<UserGroupBase> _UserGroupBase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGroupIdChanging(System.Guid value);
    partial void OnUserGroupIdChanged();
    partial void OnUserGroupUserGroupIdChanging(System.Guid value);
    partial void OnUserGroupUserGroupIdChanged();
    #endregion
		
		public UserGroupUserGroup()
		{
			this._UserGroup = default(EntityRef<UserGroupBase>);
			this._UserGroupBase = default(EntityRef<UserGroupBase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserGroupId
		{
			get
			{
				return this._UserGroupId;
			}
			set
			{
				if ((this._UserGroupId != value))
				{
					if (this._UserGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGroupIdChanging(value);
					this.SendPropertyChanging();
					this._UserGroupId = value;
					this.SendPropertyChanged("UserGroupId");
					this.OnUserGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupUserGroupId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserGroupUserGroupId
		{
			get
			{
				return this._UserGroupUserGroupId;
			}
			set
			{
				if ((this._UserGroupUserGroupId != value))
				{
					if (this._UserGroupBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGroupUserGroupIdChanging(value);
					this.SendPropertyChanging();
					this._UserGroupUserGroupId = value;
					this.SendPropertyChanged("UserGroupUserGroupId");
					this.OnUserGroupUserGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupBase_UserGroupUserGroup", Storage="_UserGroup", ThisKey="UserGroupId", OtherKey="Id", IsForeignKey=true)]
		public UserGroupBase UserGroup
		{
			get
			{
				return this._UserGroup.Entity;
			}
			set
			{
				UserGroupBase previousValue = this._UserGroup.Entity;
				if (((previousValue != value) 
							|| (this._UserGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroup.Entity = null;
						previousValue.UserGroupUserGroupsChilds.Remove(this);
					}
					this._UserGroup.Entity = value;
					if ((value != null))
					{
						value.UserGroupUserGroupsChilds.Add(this);
						this._UserGroupId = value.Id;
					}
					else
					{
						this._UserGroupId = default(System.Guid);
					}
					this.SendPropertyChanged("UserGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupBase_UserGroupUserGroup1", Storage="_UserGroupBase", ThisKey="UserGroupUserGroupId", OtherKey="Id", IsForeignKey=true)]
		public UserGroupBase UserGroupBase
		{
			get
			{
				return this._UserGroupBase.Entity;
			}
			set
			{
				UserGroupBase previousValue = this._UserGroupBase.Entity;
				if (((previousValue != value) 
							|| (this._UserGroupBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroupBase.Entity = null;
						previousValue.UserGroupUserGroupsParents.Remove(this);
					}
					this._UserGroupBase.Entity = value;
					if ((value != null))
					{
						value.UserGroupUserGroupsParents.Add(this);
						this._UserGroupUserGroupId = value.Id;
					}
					else
					{
						this._UserGroupUserGroupId = default(System.Guid);
					}
					this.SendPropertyChanged("UserGroupBase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
