// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace HeuristicLab.Problems.ExternalEvaluation {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class ExternalEvaluationMessages {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      registry.Add(global::HeuristicLab.Problems.ExternalEvaluation.SingleObjectiveQualityMessage.QualityMessage_);
      registry.Add(global::HeuristicLab.Problems.ExternalEvaluation.MultiObjectiveQualityMessage.QualityMessage_);
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerVariable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerVariable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerArrayVariable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerArrayVariable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleVariable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleVariable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleArrayVariable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleArrayVariable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolVariable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolVariable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolArrayVariable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolArrayVariable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringVariable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringVariable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringArrayVariable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringArrayVariable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_RawVariable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_RawVariable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_QualityMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage, global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_QualityMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_SingleObjectiveQualityMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SingleObjectiveQualityMessage, global::HeuristicLab.Problems.ExternalEvaluation.SingleObjectiveQualityMessage.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_SingleObjectiveQualityMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_HeuristicLab_Problems_ExternalEvaluation_MultiObjectiveQualityMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.MultiObjectiveQualityMessage, global::HeuristicLab.Problems.ExternalEvaluation.MultiObjectiveQualityMessage.Builder> internal__static_HeuristicLab_Problems_ExternalEvaluation_MultiObjectiveQualityMessage__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ExternalEvaluationMessages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CiBFeHRlcm5hbEV2YWx1YXRpb25NZXNzYWdlcy5wcm90bxIoSGV1cmlzdGlj" + 
          "TGFiLlByb2JsZW1zLkV4dGVybmFsRXZhbHVhdGlvbiL+CgoPU29sdXRpb25N" + 
          "ZXNzYWdlEhIKCnNvbHV0aW9uSWQYASACKAUSXgoLaW50ZWdlclZhcnMYAiAD" + 
          "KAsySS5IZXVyaXN0aWNMYWIuUHJvYmxlbXMuRXh0ZXJuYWxFdmFsdWF0aW9u" + 
          "LlNvbHV0aW9uTWVzc2FnZS5JbnRlZ2VyVmFyaWFibGUSaAoQaW50ZWdlckFy" + 
          "cmF5VmFycxgDIAMoCzJOLkhldXJpc3RpY0xhYi5Qcm9ibGVtcy5FeHRlcm5h" + 
          "bEV2YWx1YXRpb24uU29sdXRpb25NZXNzYWdlLkludGVnZXJBcnJheVZhcmlh" + 
          "YmxlElwKCmRvdWJsZVZhcnMYBCADKAsySC5IZXVyaXN0aWNMYWIuUHJvYmxl" + 
          "bXMuRXh0ZXJuYWxFdmFsdWF0aW9uLlNvbHV0aW9uTWVzc2FnZS5Eb3VibGVW" + 
          "YXJpYWJsZRJmCg9kb3VibGVBcnJheVZhcnMYBSADKAsyTS5IZXVyaXN0aWNM" + 
          "YWIuUHJvYmxlbXMuRXh0ZXJuYWxFdmFsdWF0aW9uLlNvbHV0aW9uTWVzc2Fn" + 
          "ZS5Eb3VibGVBcnJheVZhcmlhYmxlElgKCGJvb2xWYXJzGAYgAygLMkYuSGV1" + 
          "cmlzdGljTGFiLlByb2JsZW1zLkV4dGVybmFsRXZhbHVhdGlvbi5Tb2x1dGlv" + 
          "bk1lc3NhZ2UuQm9vbFZhcmlhYmxlEmIKDWJvb2xBcnJheVZhcnMYByADKAsy" + 
          "Sy5IZXVyaXN0aWNMYWIuUHJvYmxlbXMuRXh0ZXJuYWxFdmFsdWF0aW9uLlNv" + 
          "bHV0aW9uTWVzc2FnZS5Cb29sQXJyYXlWYXJpYWJsZRJcCgpzdHJpbmdWYXJz" + 
          "GAggAygLMkguSGV1cmlzdGljTGFiLlByb2JsZW1zLkV4dGVybmFsRXZhbHVh" + 
          "dGlvbi5Tb2x1dGlvbk1lc3NhZ2UuU3RyaW5nVmFyaWFibGUSZgoPc3RyaW5n" + 
          "QXJyYXlWYXJzGAkgAygLMk0uSGV1cmlzdGljTGFiLlByb2JsZW1zLkV4dGVy" + 
          "bmFsRXZhbHVhdGlvbi5Tb2x1dGlvbk1lc3NhZ2UuU3RyaW5nQXJyYXlWYXJp" + 
          "YWJsZRJWCgdyYXdWYXJzGAogAygLMkUuSGV1cmlzdGljTGFiLlByb2JsZW1z" + 
          "LkV4dGVybmFsRXZhbHVhdGlvbi5Tb2x1dGlvbk1lc3NhZ2UuUmF3VmFyaWFi" + 
          "bGUaLQoPSW50ZWdlclZhcmlhYmxlEgwKBG5hbWUYASACKAkSDAoEZGF0YRgC" + 
          "IAEoBRpCChRJbnRlZ2VyQXJyYXlWYXJpYWJsZRIMCgRuYW1lGAEgAigJEgwK" + 
          "BGRhdGEYAiADKAUSDgoGbGVuZ3RoGAMgASgFGiwKDkRvdWJsZVZhcmlhYmxl" + 
          "EgwKBG5hbWUYASACKAkSDAoEZGF0YRgCIAEoARpBChNEb3VibGVBcnJheVZh" + 
          "cmlhYmxlEgwKBG5hbWUYASACKAkSDAoEZGF0YRgCIAMoARIOCgZsZW5ndGgY" + 
          "AyABKAUaKgoMQm9vbFZhcmlhYmxlEgwKBG5hbWUYASACKAkSDAoEZGF0YRgC" + 
          "IAEoCBo/ChFCb29sQXJyYXlWYXJpYWJsZRIMCgRuYW1lGAEgAigJEgwKBGRh" + 
          "dGEYAiADKAgSDgoGbGVuZ3RoGAMgASgFGiwKDlN0cmluZ1ZhcmlhYmxlEgwK" + 
          "BG5hbWUYASACKAkSDAoEZGF0YRgCIAEoCRpBChNTdHJpbmdBcnJheVZhcmlh" + 
          "YmxlEgwKBG5hbWUYASACKAkSDAoEZGF0YRgCIAMoCRIOCgZsZW5ndGgYAyAB" + 
          "KAUaKQoLUmF3VmFyaWFibGUSDAoEbmFtZRgBIAIoCRIMCgRkYXRhGAIgASgM" + 
          "IskBCg5RdWFsaXR5TWVzc2FnZRISCgpzb2x1dGlvbklkGAEgAigFEksKBHR5" + 
          "cGUYAiACKA4yPS5IZXVyaXN0aWNMYWIuUHJvYmxlbXMuRXh0ZXJuYWxFdmFs" + 
          "dWF0aW9uLlF1YWxpdHlNZXNzYWdlLlR5cGUiSwoEVHlwZRIhCh1TaW5nbGVP" + 
          "YmplY3RpdmVRdWFsaXR5TWVzc2FnZRABEiAKHE11bHRpT2JqZWN0aXZlUXVh" + 
          "bGl0eU1lc3NhZ2UQAioJCOgHEICAgIACIs0BCh1TaW5nbGVPYmplY3RpdmVR" + 
          "dWFsaXR5TWVzc2FnZRIPCgdxdWFsaXR5GAEgAigBMpoBCg5xdWFsaXR5TWVz" + 
          "c2FnZRI4LkhldXJpc3RpY0xhYi5Qcm9ibGVtcy5FeHRlcm5hbEV2YWx1YXRp" + 
          "b24uUXVhbGl0eU1lc3NhZ2UY6AcgAigLMkcuSGV1cmlzdGljTGFiLlByb2Js" + 
          "ZW1zLkV4dGVybmFsRXZhbHVhdGlvbi5TaW5nbGVPYmplY3RpdmVRdWFsaXR5" + 
          "TWVzc2FnZSLNAQocTXVsdGlPYmplY3RpdmVRdWFsaXR5TWVzc2FnZRIRCglx" + 
          "dWFsaXRpZXMYASADKAEymQEKDnF1YWxpdHlNZXNzYWdlEjguSGV1cmlzdGlj" + 
          "TGFiLlByb2JsZW1zLkV4dGVybmFsRXZhbHVhdGlvbi5RdWFsaXR5TWVzc2Fn" + 
          "ZRjpByACKAsyRi5IZXVyaXN0aWNMYWIuUHJvYmxlbXMuRXh0ZXJuYWxFdmFs" + 
          "dWF0aW9uLk11bHRpT2JqZWN0aXZlUXVhbGl0eU1lc3NhZ2Uy0gIKEUV2YWx1" + 
          "YXRpb25TZXJ2aWNlEp0BChdFdmFsdWF0ZVNpbmdsZU9iamVjdGl2ZRI5Lkhl" + 
          "dXJpc3RpY0xhYi5Qcm9ibGVtcy5FeHRlcm5hbEV2YWx1YXRpb24uU29sdXRp" + 
          "b25NZXNzYWdlGkcuSGV1cmlzdGljTGFiLlByb2JsZW1zLkV4dGVybmFsRXZh" + 
          "bHVhdGlvbi5TaW5nbGVPYmplY3RpdmVRdWFsaXR5TWVzc2FnZRKcAQoXRXZh" + 
          "bHVhdGVNdWx0aU9iamVjdGl2ZXMSOS5IZXVyaXN0aWNMYWIuUHJvYmxlbXMu" + 
          "RXh0ZXJuYWxFdmFsdWF0aW9uLlNvbHV0aW9uTWVzc2FnZRpGLkhldXJpc3Rp" + 
          "Y0xhYi5Qcm9ibGVtcy5FeHRlcm5hbEV2YWx1YXRpb24uTXVsdGlPYmplY3Rp" + 
          "dmVRdWFsaXR5TWVzc2FnZUIuCixjb20uaGV1cmlzdGljbGFiLnByb2JsZW1z" + 
          "LmV4dGVybmFsZXZhbHVhdGlvbg==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor = Descriptor.MessageTypes[0];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor,
                new string[] { "SolutionId", "IntegerVars", "IntegerArrayVars", "DoubleVars", "DoubleArrayVars", "BoolVars", "BoolArrayVars", "StringVars", "StringArrayVars", "RawVars", });
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerVariable__Descriptor = internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor.NestedTypes[0];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerVariable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerVariable__Descriptor,
                new string[] { "Name", "Data", });
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerArrayVariable__Descriptor = internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor.NestedTypes[1];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerArrayVariable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerArrayVariable__Descriptor,
                new string[] { "Name", "Data", "Length", });
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleVariable__Descriptor = internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor.NestedTypes[2];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleVariable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleVariable__Descriptor,
                new string[] { "Name", "Data", });
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleArrayVariable__Descriptor = internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor.NestedTypes[3];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleArrayVariable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleArrayVariable__Descriptor,
                new string[] { "Name", "Data", "Length", });
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolVariable__Descriptor = internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor.NestedTypes[4];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolVariable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolVariable__Descriptor,
                new string[] { "Name", "Data", });
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolArrayVariable__Descriptor = internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor.NestedTypes[5];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolArrayVariable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolArrayVariable__Descriptor,
                new string[] { "Name", "Data", "Length", });
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringVariable__Descriptor = internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor.NestedTypes[6];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringVariable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringVariable__Descriptor,
                new string[] { "Name", "Data", });
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringArrayVariable__Descriptor = internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor.NestedTypes[7];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringArrayVariable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringArrayVariable__Descriptor,
                new string[] { "Name", "Data", "Length", });
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_RawVariable__Descriptor = internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor.NestedTypes[8];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_RawVariable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_RawVariable__Descriptor,
                new string[] { "Name", "Data", });
        internal__static_HeuristicLab_Problems_ExternalEvaluation_QualityMessage__Descriptor = Descriptor.MessageTypes[1];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_QualityMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage, global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_QualityMessage__Descriptor,
                new string[] { "SolutionId", "Type", });
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SingleObjectiveQualityMessage__Descriptor = Descriptor.MessageTypes[2];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_SingleObjectiveQualityMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.SingleObjectiveQualityMessage, global::HeuristicLab.Problems.ExternalEvaluation.SingleObjectiveQualityMessage.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_SingleObjectiveQualityMessage__Descriptor,
                new string[] { "Quality", });
        global::HeuristicLab.Problems.ExternalEvaluation.SingleObjectiveQualityMessage.QualityMessage_ = pb::GeneratedSingleExtension<global::HeuristicLab.Problems.ExternalEvaluation.SingleObjectiveQualityMessage>.CreateInstance(global::HeuristicLab.Problems.ExternalEvaluation.SingleObjectiveQualityMessage.Descriptor.Extensions[0]);
        internal__static_HeuristicLab_Problems_ExternalEvaluation_MultiObjectiveQualityMessage__Descriptor = Descriptor.MessageTypes[3];
        internal__static_HeuristicLab_Problems_ExternalEvaluation_MultiObjectiveQualityMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::HeuristicLab.Problems.ExternalEvaluation.MultiObjectiveQualityMessage, global::HeuristicLab.Problems.ExternalEvaluation.MultiObjectiveQualityMessage.Builder>(internal__static_HeuristicLab_Problems_ExternalEvaluation_MultiObjectiveQualityMessage__Descriptor,
                new string[] { "Qualities", });
        global::HeuristicLab.Problems.ExternalEvaluation.MultiObjectiveQualityMessage.QualityMessage_ = pb::GeneratedSingleExtension<global::HeuristicLab.Problems.ExternalEvaluation.MultiObjectiveQualityMessage>.CreateInstance(global::HeuristicLab.Problems.ExternalEvaluation.MultiObjectiveQualityMessage.Descriptor.Extensions[0]);
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SolutionMessage : pb::GeneratedMessage<SolutionMessage, SolutionMessage.Builder> {
    private SolutionMessage() { }
    private static readonly SolutionMessage defaultInstance = new SolutionMessage().MakeReadOnly();
    private static readonly string[] _solutionMessageFieldNames = new string[] { "boolArrayVars", "boolVars", "doubleArrayVars", "doubleVars", "integerArrayVars", "integerVars", "rawVars", "solutionId", "stringArrayVars", "stringVars" };
    private static readonly uint[] _solutionMessageFieldTags = new uint[] { 58, 50, 42, 34, 26, 18, 82, 8, 74, 66 };
    public static SolutionMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SolutionMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SolutionMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SolutionMessage, SolutionMessage.Builder> InternalFieldAccessors {
      get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class IntegerVariable : pb::GeneratedMessage<IntegerVariable, IntegerVariable.Builder> {
        private IntegerVariable() { }
        private static readonly IntegerVariable defaultInstance = new IntegerVariable().MakeReadOnly();
        private static readonly string[] _integerVariableFieldNames = new string[] { "data", "name" };
        private static readonly uint[] _integerVariableFieldTags = new uint[] { 16, 10 };
        public static IntegerVariable DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override IntegerVariable DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override IntegerVariable ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerVariable__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<IntegerVariable, IntegerVariable.Builder> InternalFieldAccessors {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerVariable__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int DataFieldNumber = 2;
        private bool hasData;
        private int data_;
        public bool HasData {
          get { return hasData; }
        }
        public int Data {
          get { return data_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasName) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _integerVariableFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[1], Name);
          }
          if (hasData) {
            output.WriteInt32(2, field_names[0], Data);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Data);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static IntegerVariable ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static IntegerVariable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static IntegerVariable ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static IntegerVariable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static IntegerVariable ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static IntegerVariable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static IntegerVariable ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static IntegerVariable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static IntegerVariable ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static IntegerVariable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private IntegerVariable MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(IntegerVariable prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<IntegerVariable, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(IntegerVariable cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private IntegerVariable result;
          
          private IntegerVariable PrepareBuilder() {
            if (resultIsReadOnly) {
              IntegerVariable original = result;
              result = new IntegerVariable();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override IntegerVariable MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable.Descriptor; }
          }
          
          public override IntegerVariable DefaultInstanceForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable.DefaultInstance; }
          }
          
          public override IntegerVariable BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is IntegerVariable) {
              return MergeFrom((IntegerVariable) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(IntegerVariable other) {
            if (other == global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasData) {
              Data = other.Data;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_integerVariableFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _integerVariableFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 16: {
                  result.hasData = input.ReadInt32(ref result.data_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasData {
            get { return result.hasData; }
          }
          public int Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(int value) {
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = 0;
            return this;
          }
        }
        static IntegerVariable() {
          object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class IntegerArrayVariable : pb::GeneratedMessage<IntegerArrayVariable, IntegerArrayVariable.Builder> {
        private IntegerArrayVariable() { }
        private static readonly IntegerArrayVariable defaultInstance = new IntegerArrayVariable().MakeReadOnly();
        private static readonly string[] _integerArrayVariableFieldNames = new string[] { "data", "length", "name" };
        private static readonly uint[] _integerArrayVariableFieldTags = new uint[] { 16, 24, 10 };
        public static IntegerArrayVariable DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override IntegerArrayVariable DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override IntegerArrayVariable ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerArrayVariable__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<IntegerArrayVariable, IntegerArrayVariable.Builder> InternalFieldAccessors {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_IntegerArrayVariable__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int DataFieldNumber = 2;
        private pbc::PopsicleList<int> data_ = new pbc::PopsicleList<int>();
        public scg::IList<int> DataList {
          get { return pbc::Lists.AsReadOnly(data_); }
        }
        public int DataCount {
          get { return data_.Count; }
        }
        public int GetData(int index) {
          return data_[index];
        }
        
        public const int LengthFieldNumber = 3;
        private bool hasLength;
        private int length_;
        public bool HasLength {
          get { return hasLength; }
        }
        public int Length {
          get { return length_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasName) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _integerArrayVariableFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[2], Name);
          }
          if (data_.Count > 0) {
            output.WriteInt32Array(2, field_names[0], data_);
          }
          if (hasLength) {
            output.WriteInt32(3, field_names[1], Length);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            {
              int dataSize = 0;
              foreach (int element in DataList) {
                dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
              }
              size += dataSize;
              size += 1 * data_.Count;
            }
            if (hasLength) {
              size += pb::CodedOutputStream.ComputeInt32Size(3, Length);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static IntegerArrayVariable ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static IntegerArrayVariable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static IntegerArrayVariable ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static IntegerArrayVariable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static IntegerArrayVariable ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static IntegerArrayVariable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static IntegerArrayVariable ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static IntegerArrayVariable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static IntegerArrayVariable ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static IntegerArrayVariable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private IntegerArrayVariable MakeReadOnly() {
          data_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(IntegerArrayVariable prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<IntegerArrayVariable, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(IntegerArrayVariable cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private IntegerArrayVariable result;
          
          private IntegerArrayVariable PrepareBuilder() {
            if (resultIsReadOnly) {
              IntegerArrayVariable original = result;
              result = new IntegerArrayVariable();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override IntegerArrayVariable MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable.Descriptor; }
          }
          
          public override IntegerArrayVariable DefaultInstanceForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable.DefaultInstance; }
          }
          
          public override IntegerArrayVariable BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is IntegerArrayVariable) {
              return MergeFrom((IntegerArrayVariable) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(IntegerArrayVariable other) {
            if (other == global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.data_.Count != 0) {
              result.data_.Add(other.data_);
            }
            if (other.HasLength) {
              Length = other.Length;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_integerArrayVariableFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _integerArrayVariableFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 18:
                case 16: {
                  input.ReadInt32Array(tag, field_name, result.data_);
                  break;
                }
                case 24: {
                  result.hasLength = input.ReadInt32(ref result.length_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<int> DataList {
            get { return PrepareBuilder().data_; }
          }
          public int DataCount {
            get { return result.DataCount; }
          }
          public int GetData(int index) {
            return result.GetData(index);
          }
          public Builder SetData(int index, int value) {
            PrepareBuilder();
            result.data_[index] = value;
            return this;
          }
          public Builder AddData(int value) {
            PrepareBuilder();
            result.data_.Add(value);
            return this;
          }
          public Builder AddRangeData(scg::IEnumerable<int> values) {
            PrepareBuilder();
            result.data_.Add(values);
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.data_.Clear();
            return this;
          }
          
          public bool HasLength {
            get { return result.hasLength; }
          }
          public int Length {
            get { return result.Length; }
            set { SetLength(value); }
          }
          public Builder SetLength(int value) {
            PrepareBuilder();
            result.hasLength = true;
            result.length_ = value;
            return this;
          }
          public Builder ClearLength() {
            PrepareBuilder();
            result.hasLength = false;
            result.length_ = 0;
            return this;
          }
        }
        static IntegerArrayVariable() {
          object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class DoubleVariable : pb::GeneratedMessage<DoubleVariable, DoubleVariable.Builder> {
        private DoubleVariable() { }
        private static readonly DoubleVariable defaultInstance = new DoubleVariable().MakeReadOnly();
        private static readonly string[] _doubleVariableFieldNames = new string[] { "data", "name" };
        private static readonly uint[] _doubleVariableFieldTags = new uint[] { 17, 10 };
        public static DoubleVariable DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override DoubleVariable DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override DoubleVariable ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleVariable__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<DoubleVariable, DoubleVariable.Builder> InternalFieldAccessors {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleVariable__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int DataFieldNumber = 2;
        private bool hasData;
        private double data_;
        public bool HasData {
          get { return hasData; }
        }
        public double Data {
          get { return data_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasName) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _doubleVariableFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[1], Name);
          }
          if (hasData) {
            output.WriteDouble(2, field_names[0], Data);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeDoubleSize(2, Data);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static DoubleVariable ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DoubleVariable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DoubleVariable ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DoubleVariable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DoubleVariable ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DoubleVariable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DoubleVariable ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DoubleVariable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DoubleVariable ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DoubleVariable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DoubleVariable MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DoubleVariable prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<DoubleVariable, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(DoubleVariable cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private DoubleVariable result;
          
          private DoubleVariable PrepareBuilder() {
            if (resultIsReadOnly) {
              DoubleVariable original = result;
              result = new DoubleVariable();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override DoubleVariable MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable.Descriptor; }
          }
          
          public override DoubleVariable DefaultInstanceForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable.DefaultInstance; }
          }
          
          public override DoubleVariable BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is DoubleVariable) {
              return MergeFrom((DoubleVariable) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(DoubleVariable other) {
            if (other == global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasData) {
              Data = other.Data;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_doubleVariableFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _doubleVariableFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 17: {
                  result.hasData = input.ReadDouble(ref result.data_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasData {
            get { return result.hasData; }
          }
          public double Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(double value) {
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = 0D;
            return this;
          }
        }
        static DoubleVariable() {
          object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class DoubleArrayVariable : pb::GeneratedMessage<DoubleArrayVariable, DoubleArrayVariable.Builder> {
        private DoubleArrayVariable() { }
        private static readonly DoubleArrayVariable defaultInstance = new DoubleArrayVariable().MakeReadOnly();
        private static readonly string[] _doubleArrayVariableFieldNames = new string[] { "data", "length", "name" };
        private static readonly uint[] _doubleArrayVariableFieldTags = new uint[] { 17, 24, 10 };
        public static DoubleArrayVariable DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override DoubleArrayVariable DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override DoubleArrayVariable ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleArrayVariable__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<DoubleArrayVariable, DoubleArrayVariable.Builder> InternalFieldAccessors {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_DoubleArrayVariable__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int DataFieldNumber = 2;
        private pbc::PopsicleList<double> data_ = new pbc::PopsicleList<double>();
        public scg::IList<double> DataList {
          get { return pbc::Lists.AsReadOnly(data_); }
        }
        public int DataCount {
          get { return data_.Count; }
        }
        public double GetData(int index) {
          return data_[index];
        }
        
        public const int LengthFieldNumber = 3;
        private bool hasLength;
        private int length_;
        public bool HasLength {
          get { return hasLength; }
        }
        public int Length {
          get { return length_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasName) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _doubleArrayVariableFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[2], Name);
          }
          if (data_.Count > 0) {
            output.WriteDoubleArray(2, field_names[0], data_);
          }
          if (hasLength) {
            output.WriteInt32(3, field_names[1], Length);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            {
              int dataSize = 0;
              dataSize = 8 * data_.Count;
              size += dataSize;
              size += 1 * data_.Count;
            }
            if (hasLength) {
              size += pb::CodedOutputStream.ComputeInt32Size(3, Length);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static DoubleArrayVariable ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DoubleArrayVariable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DoubleArrayVariable ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DoubleArrayVariable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DoubleArrayVariable ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DoubleArrayVariable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DoubleArrayVariable ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DoubleArrayVariable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DoubleArrayVariable ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DoubleArrayVariable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DoubleArrayVariable MakeReadOnly() {
          data_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DoubleArrayVariable prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<DoubleArrayVariable, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(DoubleArrayVariable cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private DoubleArrayVariable result;
          
          private DoubleArrayVariable PrepareBuilder() {
            if (resultIsReadOnly) {
              DoubleArrayVariable original = result;
              result = new DoubleArrayVariable();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override DoubleArrayVariable MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable.Descriptor; }
          }
          
          public override DoubleArrayVariable DefaultInstanceForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable.DefaultInstance; }
          }
          
          public override DoubleArrayVariable BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is DoubleArrayVariable) {
              return MergeFrom((DoubleArrayVariable) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(DoubleArrayVariable other) {
            if (other == global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.data_.Count != 0) {
              result.data_.Add(other.data_);
            }
            if (other.HasLength) {
              Length = other.Length;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_doubleArrayVariableFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _doubleArrayVariableFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 18:
                case 17: {
                  input.ReadDoubleArray(tag, field_name, result.data_);
                  break;
                }
                case 24: {
                  result.hasLength = input.ReadInt32(ref result.length_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<double> DataList {
            get { return PrepareBuilder().data_; }
          }
          public int DataCount {
            get { return result.DataCount; }
          }
          public double GetData(int index) {
            return result.GetData(index);
          }
          public Builder SetData(int index, double value) {
            PrepareBuilder();
            result.data_[index] = value;
            return this;
          }
          public Builder AddData(double value) {
            PrepareBuilder();
            result.data_.Add(value);
            return this;
          }
          public Builder AddRangeData(scg::IEnumerable<double> values) {
            PrepareBuilder();
            result.data_.Add(values);
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.data_.Clear();
            return this;
          }
          
          public bool HasLength {
            get { return result.hasLength; }
          }
          public int Length {
            get { return result.Length; }
            set { SetLength(value); }
          }
          public Builder SetLength(int value) {
            PrepareBuilder();
            result.hasLength = true;
            result.length_ = value;
            return this;
          }
          public Builder ClearLength() {
            PrepareBuilder();
            result.hasLength = false;
            result.length_ = 0;
            return this;
          }
        }
        static DoubleArrayVariable() {
          object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class BoolVariable : pb::GeneratedMessage<BoolVariable, BoolVariable.Builder> {
        private BoolVariable() { }
        private static readonly BoolVariable defaultInstance = new BoolVariable().MakeReadOnly();
        private static readonly string[] _boolVariableFieldNames = new string[] { "data", "name" };
        private static readonly uint[] _boolVariableFieldTags = new uint[] { 16, 10 };
        public static BoolVariable DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override BoolVariable DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override BoolVariable ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolVariable__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<BoolVariable, BoolVariable.Builder> InternalFieldAccessors {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolVariable__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int DataFieldNumber = 2;
        private bool hasData;
        private bool data_;
        public bool HasData {
          get { return hasData; }
        }
        public bool Data {
          get { return data_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasName) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _boolVariableFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[1], Name);
          }
          if (hasData) {
            output.WriteBool(2, field_names[0], Data);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeBoolSize(2, Data);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static BoolVariable ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BoolVariable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BoolVariable ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BoolVariable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BoolVariable ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BoolVariable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static BoolVariable ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static BoolVariable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static BoolVariable ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BoolVariable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private BoolVariable MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(BoolVariable prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<BoolVariable, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(BoolVariable cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private BoolVariable result;
          
          private BoolVariable PrepareBuilder() {
            if (resultIsReadOnly) {
              BoolVariable original = result;
              result = new BoolVariable();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override BoolVariable MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable.Descriptor; }
          }
          
          public override BoolVariable DefaultInstanceForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable.DefaultInstance; }
          }
          
          public override BoolVariable BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is BoolVariable) {
              return MergeFrom((BoolVariable) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(BoolVariable other) {
            if (other == global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasData) {
              Data = other.Data;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_boolVariableFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _boolVariableFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 16: {
                  result.hasData = input.ReadBool(ref result.data_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasData {
            get { return result.hasData; }
          }
          public bool Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(bool value) {
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = false;
            return this;
          }
        }
        static BoolVariable() {
          object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class BoolArrayVariable : pb::GeneratedMessage<BoolArrayVariable, BoolArrayVariable.Builder> {
        private BoolArrayVariable() { }
        private static readonly BoolArrayVariable defaultInstance = new BoolArrayVariable().MakeReadOnly();
        private static readonly string[] _boolArrayVariableFieldNames = new string[] { "data", "length", "name" };
        private static readonly uint[] _boolArrayVariableFieldTags = new uint[] { 16, 24, 10 };
        public static BoolArrayVariable DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override BoolArrayVariable DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override BoolArrayVariable ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolArrayVariable__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<BoolArrayVariable, BoolArrayVariable.Builder> InternalFieldAccessors {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_BoolArrayVariable__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int DataFieldNumber = 2;
        private pbc::PopsicleList<bool> data_ = new pbc::PopsicleList<bool>();
        public scg::IList<bool> DataList {
          get { return pbc::Lists.AsReadOnly(data_); }
        }
        public int DataCount {
          get { return data_.Count; }
        }
        public bool GetData(int index) {
          return data_[index];
        }
        
        public const int LengthFieldNumber = 3;
        private bool hasLength;
        private int length_;
        public bool HasLength {
          get { return hasLength; }
        }
        public int Length {
          get { return length_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasName) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _boolArrayVariableFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[2], Name);
          }
          if (data_.Count > 0) {
            output.WriteBoolArray(2, field_names[0], data_);
          }
          if (hasLength) {
            output.WriteInt32(3, field_names[1], Length);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            {
              int dataSize = 0;
              dataSize = 1 * data_.Count;
              size += dataSize;
              size += 1 * data_.Count;
            }
            if (hasLength) {
              size += pb::CodedOutputStream.ComputeInt32Size(3, Length);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static BoolArrayVariable ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BoolArrayVariable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BoolArrayVariable ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BoolArrayVariable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BoolArrayVariable ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BoolArrayVariable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static BoolArrayVariable ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static BoolArrayVariable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static BoolArrayVariable ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BoolArrayVariable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private BoolArrayVariable MakeReadOnly() {
          data_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(BoolArrayVariable prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<BoolArrayVariable, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(BoolArrayVariable cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private BoolArrayVariable result;
          
          private BoolArrayVariable PrepareBuilder() {
            if (resultIsReadOnly) {
              BoolArrayVariable original = result;
              result = new BoolArrayVariable();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override BoolArrayVariable MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable.Descriptor; }
          }
          
          public override BoolArrayVariable DefaultInstanceForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable.DefaultInstance; }
          }
          
          public override BoolArrayVariable BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is BoolArrayVariable) {
              return MergeFrom((BoolArrayVariable) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(BoolArrayVariable other) {
            if (other == global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.data_.Count != 0) {
              result.data_.Add(other.data_);
            }
            if (other.HasLength) {
              Length = other.Length;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_boolArrayVariableFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _boolArrayVariableFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 18:
                case 16: {
                  input.ReadBoolArray(tag, field_name, result.data_);
                  break;
                }
                case 24: {
                  result.hasLength = input.ReadInt32(ref result.length_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<bool> DataList {
            get { return PrepareBuilder().data_; }
          }
          public int DataCount {
            get { return result.DataCount; }
          }
          public bool GetData(int index) {
            return result.GetData(index);
          }
          public Builder SetData(int index, bool value) {
            PrepareBuilder();
            result.data_[index] = value;
            return this;
          }
          public Builder AddData(bool value) {
            PrepareBuilder();
            result.data_.Add(value);
            return this;
          }
          public Builder AddRangeData(scg::IEnumerable<bool> values) {
            PrepareBuilder();
            result.data_.Add(values);
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.data_.Clear();
            return this;
          }
          
          public bool HasLength {
            get { return result.hasLength; }
          }
          public int Length {
            get { return result.Length; }
            set { SetLength(value); }
          }
          public Builder SetLength(int value) {
            PrepareBuilder();
            result.hasLength = true;
            result.length_ = value;
            return this;
          }
          public Builder ClearLength() {
            PrepareBuilder();
            result.hasLength = false;
            result.length_ = 0;
            return this;
          }
        }
        static BoolArrayVariable() {
          object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class StringVariable : pb::GeneratedMessage<StringVariable, StringVariable.Builder> {
        private StringVariable() { }
        private static readonly StringVariable defaultInstance = new StringVariable().MakeReadOnly();
        private static readonly string[] _stringVariableFieldNames = new string[] { "data", "name" };
        private static readonly uint[] _stringVariableFieldTags = new uint[] { 18, 10 };
        public static StringVariable DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override StringVariable DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override StringVariable ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringVariable__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<StringVariable, StringVariable.Builder> InternalFieldAccessors {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringVariable__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int DataFieldNumber = 2;
        private bool hasData;
        private string data_ = "";
        public bool HasData {
          get { return hasData; }
        }
        public string Data {
          get { return data_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasName) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _stringVariableFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[1], Name);
          }
          if (hasData) {
            output.WriteString(2, field_names[0], Data);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Data);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static StringVariable ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StringVariable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StringVariable ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StringVariable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StringVariable ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StringVariable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static StringVariable ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static StringVariable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static StringVariable ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StringVariable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private StringVariable MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(StringVariable prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<StringVariable, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(StringVariable cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private StringVariable result;
          
          private StringVariable PrepareBuilder() {
            if (resultIsReadOnly) {
              StringVariable original = result;
              result = new StringVariable();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override StringVariable MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable.Descriptor; }
          }
          
          public override StringVariable DefaultInstanceForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable.DefaultInstance; }
          }
          
          public override StringVariable BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is StringVariable) {
              return MergeFrom((StringVariable) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(StringVariable other) {
            if (other == global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasData) {
              Data = other.Data;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_stringVariableFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _stringVariableFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 18: {
                  result.hasData = input.ReadString(ref result.data_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasData {
            get { return result.hasData; }
          }
          public string Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = "";
            return this;
          }
        }
        static StringVariable() {
          object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class StringArrayVariable : pb::GeneratedMessage<StringArrayVariable, StringArrayVariable.Builder> {
        private StringArrayVariable() { }
        private static readonly StringArrayVariable defaultInstance = new StringArrayVariable().MakeReadOnly();
        private static readonly string[] _stringArrayVariableFieldNames = new string[] { "data", "length", "name" };
        private static readonly uint[] _stringArrayVariableFieldTags = new uint[] { 18, 24, 10 };
        public static StringArrayVariable DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override StringArrayVariable DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override StringArrayVariable ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringArrayVariable__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<StringArrayVariable, StringArrayVariable.Builder> InternalFieldAccessors {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_StringArrayVariable__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int DataFieldNumber = 2;
        private pbc::PopsicleList<string> data_ = new pbc::PopsicleList<string>();
        public scg::IList<string> DataList {
          get { return pbc::Lists.AsReadOnly(data_); }
        }
        public int DataCount {
          get { return data_.Count; }
        }
        public string GetData(int index) {
          return data_[index];
        }
        
        public const int LengthFieldNumber = 3;
        private bool hasLength;
        private int length_;
        public bool HasLength {
          get { return hasLength; }
        }
        public int Length {
          get { return length_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasName) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _stringArrayVariableFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[2], Name);
          }
          if (data_.Count > 0) {
            output.WriteStringArray(2, field_names[0], data_);
          }
          if (hasLength) {
            output.WriteInt32(3, field_names[1], Length);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            {
              int dataSize = 0;
              foreach (string element in DataList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * data_.Count;
            }
            if (hasLength) {
              size += pb::CodedOutputStream.ComputeInt32Size(3, Length);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static StringArrayVariable ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StringArrayVariable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StringArrayVariable ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StringArrayVariable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StringArrayVariable ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StringArrayVariable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static StringArrayVariable ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static StringArrayVariable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static StringArrayVariable ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StringArrayVariable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private StringArrayVariable MakeReadOnly() {
          data_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(StringArrayVariable prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<StringArrayVariable, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(StringArrayVariable cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private StringArrayVariable result;
          
          private StringArrayVariable PrepareBuilder() {
            if (resultIsReadOnly) {
              StringArrayVariable original = result;
              result = new StringArrayVariable();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override StringArrayVariable MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable.Descriptor; }
          }
          
          public override StringArrayVariable DefaultInstanceForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable.DefaultInstance; }
          }
          
          public override StringArrayVariable BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is StringArrayVariable) {
              return MergeFrom((StringArrayVariable) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(StringArrayVariable other) {
            if (other == global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.data_.Count != 0) {
              result.data_.Add(other.data_);
            }
            if (other.HasLength) {
              Length = other.Length;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_stringArrayVariableFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _stringArrayVariableFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 18: {
                  input.ReadStringArray(tag, field_name, result.data_);
                  break;
                }
                case 24: {
                  result.hasLength = input.ReadInt32(ref result.length_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<string> DataList {
            get { return PrepareBuilder().data_; }
          }
          public int DataCount {
            get { return result.DataCount; }
          }
          public string GetData(int index) {
            return result.GetData(index);
          }
          public Builder SetData(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.data_[index] = value;
            return this;
          }
          public Builder AddData(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.data_.Add(value);
            return this;
          }
          public Builder AddRangeData(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.data_.Add(values);
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.data_.Clear();
            return this;
          }
          
          public bool HasLength {
            get { return result.hasLength; }
          }
          public int Length {
            get { return result.Length; }
            set { SetLength(value); }
          }
          public Builder SetLength(int value) {
            PrepareBuilder();
            result.hasLength = true;
            result.length_ = value;
            return this;
          }
          public Builder ClearLength() {
            PrepareBuilder();
            result.hasLength = false;
            result.length_ = 0;
            return this;
          }
        }
        static StringArrayVariable() {
          object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class RawVariable : pb::GeneratedMessage<RawVariable, RawVariable.Builder> {
        private RawVariable() { }
        private static readonly RawVariable defaultInstance = new RawVariable().MakeReadOnly();
        private static readonly string[] _rawVariableFieldNames = new string[] { "data", "name" };
        private static readonly uint[] _rawVariableFieldTags = new uint[] { 18, 10 };
        public static RawVariable DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override RawVariable DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override RawVariable ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_RawVariable__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<RawVariable, RawVariable.Builder> InternalFieldAccessors {
          get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SolutionMessage_RawVariable__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int DataFieldNumber = 2;
        private bool hasData;
        private pb::ByteString data_ = pb::ByteString.Empty;
        public bool HasData {
          get { return hasData; }
        }
        public pb::ByteString Data {
          get { return data_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasName) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _rawVariableFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[1], Name);
          }
          if (hasData) {
            output.WriteBytes(2, field_names[0], Data);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeBytesSize(2, Data);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static RawVariable ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RawVariable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RawVariable ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RawVariable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RawVariable ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RawVariable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RawVariable ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RawVariable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RawVariable ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RawVariable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RawVariable MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RawVariable prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<RawVariable, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RawVariable cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private RawVariable result;
          
          private RawVariable PrepareBuilder() {
            if (resultIsReadOnly) {
              RawVariable original = result;
              result = new RawVariable();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override RawVariable MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable.Descriptor; }
          }
          
          public override RawVariable DefaultInstanceForType {
            get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable.DefaultInstance; }
          }
          
          public override RawVariable BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is RawVariable) {
              return MergeFrom((RawVariable) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(RawVariable other) {
            if (other == global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasData) {
              Data = other.Data;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_rawVariableFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _rawVariableFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 18: {
                  result.hasData = input.ReadBytes(ref result.data_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasData {
            get { return result.hasData; }
          }
          public pb::ByteString Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = pb::ByteString.Empty;
            return this;
          }
        }
        static RawVariable() {
          object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int SolutionIdFieldNumber = 1;
    private bool hasSolutionId;
    private int solutionId_;
    public bool HasSolutionId {
      get { return hasSolutionId; }
    }
    public int SolutionId {
      get { return solutionId_; }
    }
    
    public const int IntegerVarsFieldNumber = 2;
    private pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable> integerVars_ = new pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable>();
    public scg::IList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable> IntegerVarsList {
      get { return integerVars_; }
    }
    public int IntegerVarsCount {
      get { return integerVars_.Count; }
    }
    public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable GetIntegerVars(int index) {
      return integerVars_[index];
    }
    
    public const int IntegerArrayVarsFieldNumber = 3;
    private pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable> integerArrayVars_ = new pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable>();
    public scg::IList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable> IntegerArrayVarsList {
      get { return integerArrayVars_; }
    }
    public int IntegerArrayVarsCount {
      get { return integerArrayVars_.Count; }
    }
    public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable GetIntegerArrayVars(int index) {
      return integerArrayVars_[index];
    }
    
    public const int DoubleVarsFieldNumber = 4;
    private pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable> doubleVars_ = new pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable>();
    public scg::IList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable> DoubleVarsList {
      get { return doubleVars_; }
    }
    public int DoubleVarsCount {
      get { return doubleVars_.Count; }
    }
    public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable GetDoubleVars(int index) {
      return doubleVars_[index];
    }
    
    public const int DoubleArrayVarsFieldNumber = 5;
    private pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable> doubleArrayVars_ = new pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable>();
    public scg::IList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable> DoubleArrayVarsList {
      get { return doubleArrayVars_; }
    }
    public int DoubleArrayVarsCount {
      get { return doubleArrayVars_.Count; }
    }
    public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable GetDoubleArrayVars(int index) {
      return doubleArrayVars_[index];
    }
    
    public const int BoolVarsFieldNumber = 6;
    private pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable> boolVars_ = new pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable>();
    public scg::IList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable> BoolVarsList {
      get { return boolVars_; }
    }
    public int BoolVarsCount {
      get { return boolVars_.Count; }
    }
    public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable GetBoolVars(int index) {
      return boolVars_[index];
    }
    
    public const int BoolArrayVarsFieldNumber = 7;
    private pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable> boolArrayVars_ = new pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable>();
    public scg::IList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable> BoolArrayVarsList {
      get { return boolArrayVars_; }
    }
    public int BoolArrayVarsCount {
      get { return boolArrayVars_.Count; }
    }
    public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable GetBoolArrayVars(int index) {
      return boolArrayVars_[index];
    }
    
    public const int StringVarsFieldNumber = 8;
    private pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable> stringVars_ = new pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable>();
    public scg::IList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable> StringVarsList {
      get { return stringVars_; }
    }
    public int StringVarsCount {
      get { return stringVars_.Count; }
    }
    public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable GetStringVars(int index) {
      return stringVars_[index];
    }
    
    public const int StringArrayVarsFieldNumber = 9;
    private pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable> stringArrayVars_ = new pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable>();
    public scg::IList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable> StringArrayVarsList {
      get { return stringArrayVars_; }
    }
    public int StringArrayVarsCount {
      get { return stringArrayVars_.Count; }
    }
    public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable GetStringArrayVars(int index) {
      return stringArrayVars_[index];
    }
    
    public const int RawVarsFieldNumber = 10;
    private pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable> rawVars_ = new pbc::PopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable>();
    public scg::IList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable> RawVarsList {
      get { return rawVars_; }
    }
    public int RawVarsCount {
      get { return rawVars_.Count; }
    }
    public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable GetRawVars(int index) {
      return rawVars_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSolutionId) return false;
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable element in IntegerVarsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable element in IntegerArrayVarsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable element in DoubleVarsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable element in DoubleArrayVarsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable element in BoolVarsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable element in BoolArrayVarsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable element in StringVarsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable element in StringArrayVarsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable element in RawVarsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _solutionMessageFieldNames;
      if (hasSolutionId) {
        output.WriteInt32(1, field_names[7], SolutionId);
      }
      if (integerVars_.Count > 0) {
        output.WriteMessageArray(2, field_names[5], integerVars_);
      }
      if (integerArrayVars_.Count > 0) {
        output.WriteMessageArray(3, field_names[4], integerArrayVars_);
      }
      if (doubleVars_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], doubleVars_);
      }
      if (doubleArrayVars_.Count > 0) {
        output.WriteMessageArray(5, field_names[2], doubleArrayVars_);
      }
      if (boolVars_.Count > 0) {
        output.WriteMessageArray(6, field_names[1], boolVars_);
      }
      if (boolArrayVars_.Count > 0) {
        output.WriteMessageArray(7, field_names[0], boolArrayVars_);
      }
      if (stringVars_.Count > 0) {
        output.WriteMessageArray(8, field_names[9], stringVars_);
      }
      if (stringArrayVars_.Count > 0) {
        output.WriteMessageArray(9, field_names[8], stringArrayVars_);
      }
      if (rawVars_.Count > 0) {
        output.WriteMessageArray(10, field_names[6], rawVars_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSolutionId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, SolutionId);
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable element in IntegerVarsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable element in IntegerArrayVarsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable element in DoubleVarsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable element in DoubleArrayVarsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable element in BoolVarsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable element in BoolArrayVarsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable element in StringVarsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable element in StringArrayVarsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        foreach (global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable element in RawVarsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SolutionMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SolutionMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SolutionMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SolutionMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SolutionMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SolutionMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SolutionMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SolutionMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SolutionMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SolutionMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SolutionMessage MakeReadOnly() {
      integerVars_.MakeReadOnly();
      integerArrayVars_.MakeReadOnly();
      doubleVars_.MakeReadOnly();
      doubleArrayVars_.MakeReadOnly();
      boolVars_.MakeReadOnly();
      boolArrayVars_.MakeReadOnly();
      stringVars_.MakeReadOnly();
      stringArrayVars_.MakeReadOnly();
      rawVars_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SolutionMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SolutionMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SolutionMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SolutionMessage result;
      
      private SolutionMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          SolutionMessage original = result;
          result = new SolutionMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SolutionMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Descriptor; }
      }
      
      public override SolutionMessage DefaultInstanceForType {
        get { return global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.DefaultInstance; }
      }
      
      public override SolutionMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SolutionMessage) {
          return MergeFrom((SolutionMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SolutionMessage other) {
        if (other == global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSolutionId) {
          SolutionId = other.SolutionId;
        }
        if (other.integerVars_.Count != 0) {
          result.integerVars_.Add(other.integerVars_);
        }
        if (other.integerArrayVars_.Count != 0) {
          result.integerArrayVars_.Add(other.integerArrayVars_);
        }
        if (other.doubleVars_.Count != 0) {
          result.doubleVars_.Add(other.doubleVars_);
        }
        if (other.doubleArrayVars_.Count != 0) {
          result.doubleArrayVars_.Add(other.doubleArrayVars_);
        }
        if (other.boolVars_.Count != 0) {
          result.boolVars_.Add(other.boolVars_);
        }
        if (other.boolArrayVars_.Count != 0) {
          result.boolArrayVars_.Add(other.boolArrayVars_);
        }
        if (other.stringVars_.Count != 0) {
          result.stringVars_.Add(other.stringVars_);
        }
        if (other.stringArrayVars_.Count != 0) {
          result.stringArrayVars_.Add(other.stringArrayVars_);
        }
        if (other.rawVars_.Count != 0) {
          result.rawVars_.Add(other.rawVars_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_solutionMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _solutionMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSolutionId = input.ReadInt32(ref result.solutionId_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.integerVars_, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.integerArrayVars_, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.doubleVars_, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.doubleArrayVars_, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.boolVars_, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable.DefaultInstance, extensionRegistry);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.boolArrayVars_, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable.DefaultInstance, extensionRegistry);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.stringVars_, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable.DefaultInstance, extensionRegistry);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.stringArrayVars_, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable.DefaultInstance, extensionRegistry);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.rawVars_, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSolutionId {
        get { return result.hasSolutionId; }
      }
      public int SolutionId {
        get { return result.SolutionId; }
        set { SetSolutionId(value); }
      }
      public Builder SetSolutionId(int value) {
        PrepareBuilder();
        result.hasSolutionId = true;
        result.solutionId_ = value;
        return this;
      }
      public Builder ClearSolutionId() {
        PrepareBuilder();
        result.hasSolutionId = false;
        result.solutionId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable> IntegerVarsList {
        get { return PrepareBuilder().integerVars_; }
      }
      public int IntegerVarsCount {
        get { return result.IntegerVarsCount; }
      }
      public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable GetIntegerVars(int index) {
        return result.GetIntegerVars(index);
      }
      public Builder SetIntegerVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.integerVars_[index] = value;
        return this;
      }
      public Builder SetIntegerVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.integerVars_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddIntegerVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.integerVars_.Add(value);
        return this;
      }
      public Builder AddIntegerVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.integerVars_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeIntegerVars(scg::IEnumerable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerVariable> values) {
        PrepareBuilder();
        result.integerVars_.Add(values);
        return this;
      }
      public Builder ClearIntegerVars() {
        PrepareBuilder();
        result.integerVars_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable> IntegerArrayVarsList {
        get { return PrepareBuilder().integerArrayVars_; }
      }
      public int IntegerArrayVarsCount {
        get { return result.IntegerArrayVarsCount; }
      }
      public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable GetIntegerArrayVars(int index) {
        return result.GetIntegerArrayVars(index);
      }
      public Builder SetIntegerArrayVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.integerArrayVars_[index] = value;
        return this;
      }
      public Builder SetIntegerArrayVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.integerArrayVars_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddIntegerArrayVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.integerArrayVars_.Add(value);
        return this;
      }
      public Builder AddIntegerArrayVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.integerArrayVars_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeIntegerArrayVars(scg::IEnumerable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.IntegerArrayVariable> values) {
        PrepareBuilder();
        result.integerArrayVars_.Add(values);
        return this;
      }
      public Builder ClearIntegerArrayVars() {
        PrepareBuilder();
        result.integerArrayVars_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable> DoubleVarsList {
        get { return PrepareBuilder().doubleVars_; }
      }
      public int DoubleVarsCount {
        get { return result.DoubleVarsCount; }
      }
      public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable GetDoubleVars(int index) {
        return result.GetDoubleVars(index);
      }
      public Builder SetDoubleVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.doubleVars_[index] = value;
        return this;
      }
      public Builder SetDoubleVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.doubleVars_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDoubleVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.doubleVars_.Add(value);
        return this;
      }
      public Builder AddDoubleVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.doubleVars_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDoubleVars(scg::IEnumerable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleVariable> values) {
        PrepareBuilder();
        result.doubleVars_.Add(values);
        return this;
      }
      public Builder ClearDoubleVars() {
        PrepareBuilder();
        result.doubleVars_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable> DoubleArrayVarsList {
        get { return PrepareBuilder().doubleArrayVars_; }
      }
      public int DoubleArrayVarsCount {
        get { return result.DoubleArrayVarsCount; }
      }
      public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable GetDoubleArrayVars(int index) {
        return result.GetDoubleArrayVars(index);
      }
      public Builder SetDoubleArrayVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.doubleArrayVars_[index] = value;
        return this;
      }
      public Builder SetDoubleArrayVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.doubleArrayVars_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDoubleArrayVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.doubleArrayVars_.Add(value);
        return this;
      }
      public Builder AddDoubleArrayVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.doubleArrayVars_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDoubleArrayVars(scg::IEnumerable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.DoubleArrayVariable> values) {
        PrepareBuilder();
        result.doubleArrayVars_.Add(values);
        return this;
      }
      public Builder ClearDoubleArrayVars() {
        PrepareBuilder();
        result.doubleArrayVars_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable> BoolVarsList {
        get { return PrepareBuilder().boolVars_; }
      }
      public int BoolVarsCount {
        get { return result.BoolVarsCount; }
      }
      public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable GetBoolVars(int index) {
        return result.GetBoolVars(index);
      }
      public Builder SetBoolVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.boolVars_[index] = value;
        return this;
      }
      public Builder SetBoolVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.boolVars_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBoolVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.boolVars_.Add(value);
        return this;
      }
      public Builder AddBoolVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.boolVars_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBoolVars(scg::IEnumerable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolVariable> values) {
        PrepareBuilder();
        result.boolVars_.Add(values);
        return this;
      }
      public Builder ClearBoolVars() {
        PrepareBuilder();
        result.boolVars_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable> BoolArrayVarsList {
        get { return PrepareBuilder().boolArrayVars_; }
      }
      public int BoolArrayVarsCount {
        get { return result.BoolArrayVarsCount; }
      }
      public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable GetBoolArrayVars(int index) {
        return result.GetBoolArrayVars(index);
      }
      public Builder SetBoolArrayVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.boolArrayVars_[index] = value;
        return this;
      }
      public Builder SetBoolArrayVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.boolArrayVars_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBoolArrayVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.boolArrayVars_.Add(value);
        return this;
      }
      public Builder AddBoolArrayVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.boolArrayVars_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBoolArrayVars(scg::IEnumerable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.BoolArrayVariable> values) {
        PrepareBuilder();
        result.boolArrayVars_.Add(values);
        return this;
      }
      public Builder ClearBoolArrayVars() {
        PrepareBuilder();
        result.boolArrayVars_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable> StringVarsList {
        get { return PrepareBuilder().stringVars_; }
      }
      public int StringVarsCount {
        get { return result.StringVarsCount; }
      }
      public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable GetStringVars(int index) {
        return result.GetStringVars(index);
      }
      public Builder SetStringVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stringVars_[index] = value;
        return this;
      }
      public Builder SetStringVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stringVars_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStringVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stringVars_.Add(value);
        return this;
      }
      public Builder AddStringVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stringVars_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStringVars(scg::IEnumerable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringVariable> values) {
        PrepareBuilder();
        result.stringVars_.Add(values);
        return this;
      }
      public Builder ClearStringVars() {
        PrepareBuilder();
        result.stringVars_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable> StringArrayVarsList {
        get { return PrepareBuilder().stringArrayVars_; }
      }
      public int StringArrayVarsCount {
        get { return result.StringArrayVarsCount; }
      }
      public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable GetStringArrayVars(int index) {
        return result.GetStringArrayVars(index);
      }
      public Builder SetStringArrayVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stringArrayVars_[index] = value;
        return this;
      }
      public Builder SetStringArrayVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stringArrayVars_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStringArrayVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stringArrayVars_.Add(value);
        return this;
      }
      public Builder AddStringArrayVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stringArrayVars_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStringArrayVars(scg::IEnumerable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.StringArrayVariable> values) {
        PrepareBuilder();
        result.stringArrayVars_.Add(values);
        return this;
      }
      public Builder ClearStringArrayVars() {
        PrepareBuilder();
        result.stringArrayVars_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable> RawVarsList {
        get { return PrepareBuilder().rawVars_; }
      }
      public int RawVarsCount {
        get { return result.RawVarsCount; }
      }
      public global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable GetRawVars(int index) {
        return result.GetRawVars(index);
      }
      public Builder SetRawVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rawVars_[index] = value;
        return this;
      }
      public Builder SetRawVars(int index, global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rawVars_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRawVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rawVars_.Add(value);
        return this;
      }
      public Builder AddRawVars(global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rawVars_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRawVars(scg::IEnumerable<global::HeuristicLab.Problems.ExternalEvaluation.SolutionMessage.Types.RawVariable> values) {
        PrepareBuilder();
        result.rawVars_.Add(values);
        return this;
      }
      public Builder ClearRawVars() {
        PrepareBuilder();
        result.rawVars_.Clear();
        return this;
      }
    }
    static SolutionMessage() {
      object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QualityMessage : pb::ExtendableMessage<QualityMessage, QualityMessage.Builder> {
    private QualityMessage() { }
    private static readonly QualityMessage defaultInstance = new QualityMessage().MakeReadOnly();
    private static readonly string[] _qualityMessageFieldNames = new string[] { "solutionId", "type" };
    private static readonly uint[] _qualityMessageFieldTags = new uint[] { 8, 16 };
    public static QualityMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QualityMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QualityMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_QualityMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QualityMessage, QualityMessage.Builder> InternalFieldAccessors {
      get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_QualityMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Type {
        SingleObjectiveQualityMessage = 1,
        MultiObjectiveQualityMessage = 2,
      }
      
    }
    #endregion
    
    public const int SolutionIdFieldNumber = 1;
    private bool hasSolutionId;
    private int solutionId_;
    public bool HasSolutionId {
      get { return hasSolutionId; }
    }
    public int SolutionId {
      get { return solutionId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage.Types.Type type_ = global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage.Types.Type.SingleObjectiveQualityMessage;
    public bool HasType {
      get { return hasType; }
    }
    public global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage.Types.Type Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSolutionId) return false;
        if (!hasType) return false;
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _qualityMessageFieldNames;
      pb::ExtendableMessage<QualityMessage, QualityMessage.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (hasSolutionId) {
        output.WriteInt32(1, field_names[0], SolutionId);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[1], (int) Type, Type);
      }
      extensionWriter.WriteUntil(536870912, output);
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSolutionId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, SolutionId);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QualityMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QualityMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QualityMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QualityMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QualityMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QualityMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QualityMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QualityMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QualityMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QualityMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QualityMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QualityMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::ExtendableBuilder<QualityMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QualityMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QualityMessage result;
      
      private QualityMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          QualityMessage original = result;
          result = new QualityMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QualityMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage.Descriptor; }
      }
      
      public override QualityMessage DefaultInstanceForType {
        get { return global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage.DefaultInstance; }
      }
      
      public override QualityMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QualityMessage) {
          return MergeFrom((QualityMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QualityMessage other) {
        if (other == global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSolutionId) {
          SolutionId = other.SolutionId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_qualityMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _qualityMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSolutionId = input.ReadInt32(ref result.solutionId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSolutionId {
        get { return result.hasSolutionId; }
      }
      public int SolutionId {
        get { return result.SolutionId; }
        set { SetSolutionId(value); }
      }
      public Builder SetSolutionId(int value) {
        PrepareBuilder();
        result.hasSolutionId = true;
        result.solutionId_ = value;
        return this;
      }
      public Builder ClearSolutionId() {
        PrepareBuilder();
        result.hasSolutionId = false;
        result.solutionId_ = 0;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::HeuristicLab.Problems.ExternalEvaluation.QualityMessage.Types.Type.SingleObjectiveQualityMessage;
        return this;
      }
    }
    static QualityMessage() {
      object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SingleObjectiveQualityMessage : pb::GeneratedMessage<SingleObjectiveQualityMessage, SingleObjectiveQualityMessage.Builder> {
    private SingleObjectiveQualityMessage() { }
    private static readonly SingleObjectiveQualityMessage defaultInstance = new SingleObjectiveQualityMessage().MakeReadOnly();
    private static readonly string[] _singleObjectiveQualityMessageFieldNames = new string[] { "quality" };
    private static readonly uint[] _singleObjectiveQualityMessageFieldTags = new uint[] { 9 };
    public static SingleObjectiveQualityMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SingleObjectiveQualityMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SingleObjectiveQualityMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SingleObjectiveQualityMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SingleObjectiveQualityMessage, SingleObjectiveQualityMessage.Builder> InternalFieldAccessors {
      get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_SingleObjectiveQualityMessage__FieldAccessorTable; }
    }
    
    public const int QualityMessage_FieldNumber = 1000;
    public static pb::GeneratedExtensionBase<global::HeuristicLab.Problems.ExternalEvaluation.SingleObjectiveQualityMessage> QualityMessage_;
    public const int QualityFieldNumber = 1;
    private bool hasQuality;
    private double quality_;
    public bool HasQuality {
      get { return hasQuality; }
    }
    public double Quality {
      get { return quality_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasQuality) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _singleObjectiveQualityMessageFieldNames;
      if (hasQuality) {
        output.WriteDouble(1, field_names[0], Quality);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasQuality) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, Quality);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SingleObjectiveQualityMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SingleObjectiveQualityMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SingleObjectiveQualityMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SingleObjectiveQualityMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SingleObjectiveQualityMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SingleObjectiveQualityMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SingleObjectiveQualityMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SingleObjectiveQualityMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SingleObjectiveQualityMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SingleObjectiveQualityMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SingleObjectiveQualityMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SingleObjectiveQualityMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SingleObjectiveQualityMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SingleObjectiveQualityMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SingleObjectiveQualityMessage result;
      
      private SingleObjectiveQualityMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          SingleObjectiveQualityMessage original = result;
          result = new SingleObjectiveQualityMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SingleObjectiveQualityMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::HeuristicLab.Problems.ExternalEvaluation.SingleObjectiveQualityMessage.Descriptor; }
      }
      
      public override SingleObjectiveQualityMessage DefaultInstanceForType {
        get { return global::HeuristicLab.Problems.ExternalEvaluation.SingleObjectiveQualityMessage.DefaultInstance; }
      }
      
      public override SingleObjectiveQualityMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SingleObjectiveQualityMessage) {
          return MergeFrom((SingleObjectiveQualityMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SingleObjectiveQualityMessage other) {
        if (other == global::HeuristicLab.Problems.ExternalEvaluation.SingleObjectiveQualityMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasQuality) {
          Quality = other.Quality;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_singleObjectiveQualityMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _singleObjectiveQualityMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasQuality = input.ReadDouble(ref result.quality_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasQuality {
        get { return result.hasQuality; }
      }
      public double Quality {
        get { return result.Quality; }
        set { SetQuality(value); }
      }
      public Builder SetQuality(double value) {
        PrepareBuilder();
        result.hasQuality = true;
        result.quality_ = value;
        return this;
      }
      public Builder ClearQuality() {
        PrepareBuilder();
        result.hasQuality = false;
        result.quality_ = 0D;
        return this;
      }
    }
    static SingleObjectiveQualityMessage() {
      object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MultiObjectiveQualityMessage : pb::GeneratedMessage<MultiObjectiveQualityMessage, MultiObjectiveQualityMessage.Builder> {
    private MultiObjectiveQualityMessage() { }
    private static readonly MultiObjectiveQualityMessage defaultInstance = new MultiObjectiveQualityMessage().MakeReadOnly();
    private static readonly string[] _multiObjectiveQualityMessageFieldNames = new string[] { "qualities" };
    private static readonly uint[] _multiObjectiveQualityMessageFieldTags = new uint[] { 9 };
    public static MultiObjectiveQualityMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MultiObjectiveQualityMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MultiObjectiveQualityMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_MultiObjectiveQualityMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MultiObjectiveQualityMessage, MultiObjectiveQualityMessage.Builder> InternalFieldAccessors {
      get { return global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.internal__static_HeuristicLab_Problems_ExternalEvaluation_MultiObjectiveQualityMessage__FieldAccessorTable; }
    }
    
    public const int QualityMessage_FieldNumber = 1001;
    public static pb::GeneratedExtensionBase<global::HeuristicLab.Problems.ExternalEvaluation.MultiObjectiveQualityMessage> QualityMessage_;
    public const int QualitiesFieldNumber = 1;
    private pbc::PopsicleList<double> qualities_ = new pbc::PopsicleList<double>();
    public scg::IList<double> QualitiesList {
      get { return pbc::Lists.AsReadOnly(qualities_); }
    }
    public int QualitiesCount {
      get { return qualities_.Count; }
    }
    public double GetQualities(int index) {
      return qualities_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _multiObjectiveQualityMessageFieldNames;
      if (qualities_.Count > 0) {
        output.WriteDoubleArray(1, field_names[0], qualities_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 8 * qualities_.Count;
          size += dataSize;
          size += 1 * qualities_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MultiObjectiveQualityMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MultiObjectiveQualityMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MultiObjectiveQualityMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MultiObjectiveQualityMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MultiObjectiveQualityMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MultiObjectiveQualityMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MultiObjectiveQualityMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MultiObjectiveQualityMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MultiObjectiveQualityMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MultiObjectiveQualityMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MultiObjectiveQualityMessage MakeReadOnly() {
      qualities_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MultiObjectiveQualityMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MultiObjectiveQualityMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MultiObjectiveQualityMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MultiObjectiveQualityMessage result;
      
      private MultiObjectiveQualityMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          MultiObjectiveQualityMessage original = result;
          result = new MultiObjectiveQualityMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MultiObjectiveQualityMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::HeuristicLab.Problems.ExternalEvaluation.MultiObjectiveQualityMessage.Descriptor; }
      }
      
      public override MultiObjectiveQualityMessage DefaultInstanceForType {
        get { return global::HeuristicLab.Problems.ExternalEvaluation.MultiObjectiveQualityMessage.DefaultInstance; }
      }
      
      public override MultiObjectiveQualityMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MultiObjectiveQualityMessage) {
          return MergeFrom((MultiObjectiveQualityMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MultiObjectiveQualityMessage other) {
        if (other == global::HeuristicLab.Problems.ExternalEvaluation.MultiObjectiveQualityMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.qualities_.Count != 0) {
          result.qualities_.Add(other.qualities_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_multiObjectiveQualityMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _multiObjectiveQualityMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 9: {
              input.ReadDoubleArray(tag, field_name, result.qualities_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<double> QualitiesList {
        get { return PrepareBuilder().qualities_; }
      }
      public int QualitiesCount {
        get { return result.QualitiesCount; }
      }
      public double GetQualities(int index) {
        return result.GetQualities(index);
      }
      public Builder SetQualities(int index, double value) {
        PrepareBuilder();
        result.qualities_[index] = value;
        return this;
      }
      public Builder AddQualities(double value) {
        PrepareBuilder();
        result.qualities_.Add(value);
        return this;
      }
      public Builder AddRangeQualities(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.qualities_.Add(values);
        return this;
      }
      public Builder ClearQualities() {
        PrepareBuilder();
        result.qualities_.Clear();
        return this;
      }
    }
    static MultiObjectiveQualityMessage() {
      object.ReferenceEquals(global::HeuristicLab.Problems.ExternalEvaluation.ExternalEvaluationMessages.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  /*
  * Service generation is now disabled by default, use the following option to enable:
  * option (google.protobuf.csharp_file_options).service_generator_type = GENERIC;
  */
  #endregion
  
}

#endregion Designer generated code
