#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HeuristicLab.Services.Hive.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HeuristicLab.Hive")]
	public partial class HiveDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssignedResource(AssignedResource instance);
    partial void UpdateAssignedResource(AssignedResource instance);
    partial void DeleteAssignedResource(AssignedResource instance);
    partial void InsertPlugin(Plugin instance);
    partial void UpdatePlugin(Plugin instance);
    partial void DeletePlugin(Plugin instance);
    partial void InsertRequiredPlugin(RequiredPlugin instance);
    partial void UpdateRequiredPlugin(RequiredPlugin instance);
    partial void DeleteRequiredPlugin(RequiredPlugin instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertDowntime(Downtime instance);
    partial void UpdateDowntime(Downtime instance);
    partial void DeleteDowntime(Downtime instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertTaskData(TaskData instance);
    partial void UpdateTaskData(TaskData instance);
    partial void DeleteTaskData(TaskData instance);
    partial void InsertPluginData(PluginData instance);
    partial void UpdatePluginData(PluginData instance);
    partial void DeletePluginData(PluginData instance);
    partial void InsertStateLog(StateLog instance);
    partial void UpdateStateLog(StateLog instance);
    partial void DeleteStateLog(StateLog instance);
    partial void InsertJobPermission(JobPermission instance);
    partial void UpdateJobPermission(JobPermission instance);
    partial void DeleteJobPermission(JobPermission instance);
    partial void InsertLifecycle(Lifecycle instance);
    partial void UpdateLifecycle(Lifecycle instance);
    partial void DeleteLifecycle(Lifecycle instance);
    partial void InsertResourcePermission(ResourcePermission instance);
    partial void UpdateResourcePermission(ResourcePermission instance);
    partial void DeleteResourcePermission(ResourcePermission instance);
    partial void InsertUserPriority(UserPriority instance);
    partial void UpdateUserPriority(UserPriority instance);
    partial void DeleteUserPriority(UserPriority instance);
    partial void InsertDimClient(DimClient instance);
    partial void UpdateDimClient(DimClient instance);
    partial void DeleteDimClient(DimClient instance);
    partial void InsertFactTask(FactTask instance);
    partial void UpdateFactTask(FactTask instance);
    partial void DeleteFactTask(FactTask instance);
    partial void InsertDimJob(DimJob instance);
    partial void UpdateDimJob(DimJob instance);
    partial void DeleteDimJob(DimJob instance);
    partial void InsertDimTime(DimTime instance);
    partial void UpdateDimTime(DimTime instance);
    partial void DeleteDimTime(DimTime instance);
    partial void InsertDimUser(DimUser instance);
    partial void UpdateDimUser(DimUser instance);
    partial void DeleteDimUser(DimUser instance);
    partial void InsertFactClientInfo(FactClientInfo instance);
    partial void UpdateFactClientInfo(FactClientInfo instance);
    partial void DeleteFactClientInfo(FactClientInfo instance);
    #endregion
		
		public HiveDataContext() : 
				base(global::HeuristicLab.Services.Hive.DataAccess.Settings.Default.HeuristicLab_Hive_LinqConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HiveDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HiveDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HiveDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HiveDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AssignedResource> AssignedResources
		{
			get
			{
				return this.GetTable<AssignedResource>();
			}
		}
		
		public System.Data.Linq.Table<Plugin> Plugins
		{
			get
			{
				return this.GetTable<Plugin>();
			}
		}
		
		public System.Data.Linq.Table<RequiredPlugin> RequiredPlugins
		{
			get
			{
				return this.GetTable<RequiredPlugin>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Downtime> Downtimes
		{
			get
			{
				return this.GetTable<Downtime>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<TaskData> TaskDatas
		{
			get
			{
				return this.GetTable<TaskData>();
			}
		}
		
		public System.Data.Linq.Table<PluginData> PluginDatas
		{
			get
			{
				return this.GetTable<PluginData>();
			}
		}
		
		public System.Data.Linq.Table<StateLog> StateLogs
		{
			get
			{
				return this.GetTable<StateLog>();
			}
		}
		
		public System.Data.Linq.Table<JobPermission> JobPermissions
		{
			get
			{
				return this.GetTable<JobPermission>();
			}
		}
		
		public System.Data.Linq.Table<Lifecycle> Lifecycles
		{
			get
			{
				return this.GetTable<Lifecycle>();
			}
		}
		
		public System.Data.Linq.Table<ResourcePermission> ResourcePermissions
		{
			get
			{
				return this.GetTable<ResourcePermission>();
			}
		}
		
		public System.Data.Linq.Table<UserPriority> UserPriorities
		{
			get
			{
				return this.GetTable<UserPriority>();
			}
		}
		
		public System.Data.Linq.Table<DimClient> DimClients
		{
			get
			{
				return this.GetTable<DimClient>();
			}
		}
		
		public System.Data.Linq.Table<FactTask> FactTasks
		{
			get
			{
				return this.GetTable<FactTask>();
			}
		}
		
		public System.Data.Linq.Table<DimJob> DimJobs
		{
			get
			{
				return this.GetTable<DimJob>();
			}
		}
		
		public System.Data.Linq.Table<DimTime> DimTimes
		{
			get
			{
				return this.GetTable<DimTime>();
			}
		}
		
		public System.Data.Linq.Table<DimUser> DimUsers
		{
			get
			{
				return this.GetTable<DimUser>();
			}
		}
		
		public System.Data.Linq.Table<FactClientInfo> FactClientInfos
		{
			get
			{
				return this.GetTable<FactClientInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssignedResources")]
	public partial class AssignedResource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ResourceId;
		
		private System.Guid _JobId;
		
		private EntityRef<Resource> _Resource;
		
		private EntityRef<Task> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIdChanging(System.Guid value);
    partial void OnResourceIdChanged();
    partial void OnTaskIdChanging(System.Guid value);
    partial void OnTaskIdChanged();
    #endregion
		
		public AssignedResource()
		{
			this._Resource = default(EntityRef<Resource>);
			this._Job = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TaskId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_AssignedResource", Storage="_Resource", ThisKey="ResourceId", OtherKey="ResourceId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.AssignedResources.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.AssignedResources.Add(this);
						this._ResourceId = value.ResourceId;
					}
					else
					{
						this._ResourceId = default(System.Guid);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_AssignedResource", Storage="_Job", ThisKey="TaskId", OtherKey="TaskId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Task Task
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Task previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.AssignedResources.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.AssignedResources.Add(this);
						this._JobId = value.TaskId;
					}
					else
					{
						this._JobId = default(System.Guid);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Plugin")]
	public partial class Plugin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PluginId;
		
		private string _Name;
		
		private string _Version;
		
		private System.Guid _UserId;
		
		private System.DateTime _DateCreated;
		
		private byte[] _Hash;
		
		private EntitySet<RequiredPlugin> _RequiredPlugins;
		
		private EntitySet<PluginData> _PluginData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPluginIdChanging(System.Guid value);
    partial void OnPluginIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnHashChanging(byte[] value);
    partial void OnHashChanged();
    #endregion
		
		public Plugin()
		{
			this._RequiredPlugins = new EntitySet<RequiredPlugin>(new Action<RequiredPlugin>(this.attach_RequiredPlugins), new Action<RequiredPlugin>(this.detach_RequiredPlugins));
			this._PluginData = new EntitySet<PluginData>(new Action<PluginData>(this.attach_PluginData), new Action<PluginData>(this.detach_PluginData));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PluginId", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid PluginId
		{
			get
			{
				return this._PluginId;
			}
			set
			{
				if ((this._PluginId != value))
				{
					this.OnPluginIdChanging(value);
					this.SendPropertyChanging();
					this._PluginId = value;
					this.SendPropertyChanged("PluginId");
					this.OnPluginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarChar(MAX)", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hash", DbType="VarBinary(20) NOT NULL", CanBeNull=false)]
		public byte[] Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plugin_RequiredPlugin", Storage="_RequiredPlugins", ThisKey="PluginId", OtherKey="PluginId")]
		public EntitySet<RequiredPlugin> RequiredPlugins
		{
			get
			{
				return this._RequiredPlugins;
			}
			set
			{
				this._RequiredPlugins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plugin_PluginData", Storage="_PluginData", ThisKey="PluginId", OtherKey="PluginId")]
		public EntitySet<PluginData> PluginData
		{
			get
			{
				return this._PluginData;
			}
			set
			{
				this._PluginData.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RequiredPlugins(RequiredPlugin entity)
		{
			this.SendPropertyChanging();
			entity.Plugin = this;
		}
		
		private void detach_RequiredPlugins(RequiredPlugin entity)
		{
			this.SendPropertyChanging();
			entity.Plugin = null;
		}
		
		private void attach_PluginData(PluginData entity)
		{
			this.SendPropertyChanging();
			entity.Plugin = this;
		}
		
		private void detach_PluginData(PluginData entity)
		{
			this.SendPropertyChanging();
			entity.Plugin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequiredPlugins")]
	public partial class RequiredPlugin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RequiredPluginId;
		
		private System.Guid _JobId;
		
		private System.Guid _PluginId;
		
		private EntityRef<Plugin> _PluginInfo;
		
		private EntityRef<Task> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequiredPluginIdChanging(System.Guid value);
    partial void OnRequiredPluginIdChanged();
    partial void OnTaskIdChanging(System.Guid value);
    partial void OnTaskIdChanged();
    partial void OnPluginIdChanging(System.Guid value);
    partial void OnPluginIdChanged();
    #endregion
		
		public RequiredPlugin()
		{
			this._PluginInfo = default(EntityRef<Plugin>);
			this._Job = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredPluginId", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid RequiredPluginId
		{
			get
			{
				return this._RequiredPluginId;
			}
			set
			{
				if ((this._RequiredPluginId != value))
				{
					this.OnRequiredPluginIdChanging(value);
					this.SendPropertyChanging();
					this._RequiredPluginId = value;
					this.SendPropertyChanged("RequiredPluginId");
					this.OnRequiredPluginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TaskId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PluginId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PluginId
		{
			get
			{
				return this._PluginId;
			}
			set
			{
				if ((this._PluginId != value))
				{
					if (this._PluginInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPluginIdChanging(value);
					this.SendPropertyChanging();
					this._PluginId = value;
					this.SendPropertyChanged("PluginId");
					this.OnPluginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plugin_RequiredPlugin", Storage="_PluginInfo", ThisKey="PluginId", OtherKey="PluginId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Plugin Plugin
		{
			get
			{
				return this._PluginInfo.Entity;
			}
			set
			{
				Plugin previousValue = this._PluginInfo.Entity;
				if (((previousValue != value) 
							|| (this._PluginInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PluginInfo.Entity = null;
						previousValue.RequiredPlugins.Remove(this);
					}
					this._PluginInfo.Entity = value;
					if ((value != null))
					{
						value.RequiredPlugins.Add(this);
						this._PluginId = value.PluginId;
					}
					else
					{
						this._PluginId = default(System.Guid);
					}
					this.SendPropertyChanged("Plugin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_RequiredPlugin", Storage="_Job", ThisKey="TaskId", OtherKey="TaskId", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Task previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.RequiredPlugins.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.RequiredPlugins.Add(this);
						this._JobId = value.TaskId;
					}
					else
					{
						this._JobId = default(System.Guid);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Resource")]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="RESOURCE", Type=typeof(Resource))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="Slave", Type=typeof(Slave), IsDefault=true)]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="GROUP", Type=typeof(SlaveGroup))]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ResourceId;
		
		private string _Name;
		
		private string _ResourceType;
		
		private System.Nullable<System.Guid> _ParentResourceId;
		
		private int _HbInterval;
		
		private System.Nullable<System.Guid> _OwnerUserId;
		
		private EntitySet<AssignedResource> _AssignedResources;
		
		private EntitySet<Resource> _ChildResources;
		
		private EntitySet<Downtime> _UptimeCalendars;
		
		private EntitySet<StateLog> _StateLogs;
		
		private EntitySet<ResourcePermission> _ResourcePermissions;
		
		private EntityRef<Resource> _ParentResource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIdChanging(System.Guid value);
    partial void OnResourceIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnResourceTypeChanging(string value);
    partial void OnResourceTypeChanged();
    partial void OnParentResourceIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentResourceIdChanged();
    partial void OnHbIntervalChanging(int value);
    partial void OnHbIntervalChanged();
    partial void OnOwnerUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerUserIdChanged();
    #endregion
		
		public Resource()
		{
			this._AssignedResources = new EntitySet<AssignedResource>(new Action<AssignedResource>(this.attach_AssignedResources), new Action<AssignedResource>(this.detach_AssignedResources));
			this._ChildResources = new EntitySet<Resource>(new Action<Resource>(this.attach_ChildResources), new Action<Resource>(this.detach_ChildResources));
			this._UptimeCalendars = new EntitySet<Downtime>(new Action<Downtime>(this.attach_UptimeCalendars), new Action<Downtime>(this.detach_UptimeCalendars));
			this._StateLogs = new EntitySet<StateLog>(new Action<StateLog>(this.attach_StateLogs), new Action<StateLog>(this.detach_StateLogs));
			this._ResourcePermissions = new EntitySet<ResourcePermission>(new Action<ResourcePermission>(this.attach_ResourcePermissions), new Action<ResourcePermission>(this.detach_ResourcePermissions));
			this._ParentResource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceId", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceType", CanBeNull=false, IsDiscriminator=true)]
		public string ResourceType
		{
			get
			{
				return this._ResourceType;
			}
			set
			{
				if ((this._ResourceType != value))
				{
					this.OnResourceTypeChanging(value);
					this.SendPropertyChanging();
					this._ResourceType = value;
					this.SendPropertyChanged("ResourceType");
					this.OnResourceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentResourceId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentResourceId
		{
			get
			{
				return this._ParentResourceId;
			}
			set
			{
				if ((this._ParentResourceId != value))
				{
					if (this._ParentResource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ParentResourceId = value;
					this.SendPropertyChanged("ParentResourceId");
					this.OnParentResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HbInterval", DbType="Int")]
		public int HbInterval
		{
			get
			{
				return this._HbInterval;
			}
			set
			{
				if ((this._HbInterval != value))
				{
					this.OnHbIntervalChanging(value);
					this.SendPropertyChanging();
					this._HbInterval = value;
					this.SendPropertyChanged("HbInterval");
					this.OnHbIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_AssignedResource", Storage="_AssignedResources", ThisKey="ResourceId", OtherKey="ResourceId")]
		public EntitySet<AssignedResource> AssignedResources
		{
			get
			{
				return this._AssignedResources;
			}
			set
			{
				this._AssignedResources.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_Resource", Storage="_ChildResources", ThisKey="ResourceId", OtherKey="ParentResourceId")]
		public EntitySet<Resource> ChildResources
		{
			get
			{
				return this._ChildResources;
			}
			set
			{
				this._ChildResources.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_Downtime", Storage="_UptimeCalendars", ThisKey="ResourceId", OtherKey="ResourceId")]
		public EntitySet<Downtime> Downtimes
		{
			get
			{
				return this._UptimeCalendars;
			}
			set
			{
				this._UptimeCalendars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_StateLog", Storage="_StateLogs", ThisKey="ResourceId", OtherKey="SlaveId")]
		public EntitySet<StateLog> StateLogs
		{
			get
			{
				return this._StateLogs;
			}
			set
			{
				this._StateLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourcePermission", Storage="_ResourcePermissions", ThisKey="ResourceId", OtherKey="ResourceId")]
		public EntitySet<ResourcePermission> ResourcePermissions
		{
			get
			{
				return this._ResourcePermissions;
			}
			set
			{
				this._ResourcePermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_Resource", Storage="_ParentResource", ThisKey="ParentResourceId", OtherKey="ResourceId", IsForeignKey=true)]
		public Resource ParentResource
		{
			get
			{
				return this._ParentResource.Entity;
			}
			set
			{
				Resource previousValue = this._ParentResource.Entity;
				if (((previousValue != value) 
							|| (this._ParentResource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentResource.Entity = null;
						previousValue.ChildResources.Remove(this);
					}
					this._ParentResource.Entity = value;
					if ((value != null))
					{
						value.ChildResources.Add(this);
						this._ParentResourceId = value.ResourceId;
					}
					else
					{
						this._ParentResourceId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ParentResource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssignedResources(AssignedResource entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_AssignedResources(AssignedResource entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
		
		private void attach_ChildResources(Resource entity)
		{
			this.SendPropertyChanging();
			entity.ParentResource = this;
		}
		
		private void detach_ChildResources(Resource entity)
		{
			this.SendPropertyChanging();
			entity.ParentResource = null;
		}
		
		private void attach_UptimeCalendars(Downtime entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_UptimeCalendars(Downtime entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
		
		private void attach_StateLogs(StateLog entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_StateLogs(StateLog entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
		
		private void attach_ResourcePermissions(ResourcePermission entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_ResourcePermissions(ResourcePermission entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
	}
	
	public partial class Slave : Resource
	{
		
		private System.Nullable<int> _CPUSpeed;
		
		private System.Nullable<int> _Memory;
		
		private System.Nullable<System.DateTime> _Login;
		
		private global::HeuristicLab.Services.Hive.DataAccess.SlaveState _Status;
		
		private System.Nullable<int> _NumberOfCores;
		
		private System.Nullable<int> _NumberOfFreeCores;
		
		private System.Nullable<int> _FreeMemory;
		
		private bool _IsAllowedToCalculate;
		
		private global::HeuristicLab.Services.Hive.DataAccess.CpuArchitecture _CpuArchitecture;
		
		private string _OperatingSystem;
		
		private System.Nullable<System.DateTime> _LastHeartbeat;
		
		private double _CpuUtilization;
		
		private System.Nullable<bool> _IsDisposable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCpuSpeedChanging(System.Nullable<int> value);
    partial void OnCpuSpeedChanged();
    partial void OnMemoryChanging(System.Nullable<int> value);
    partial void OnMemoryChanged();
    partial void OnLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLoginChanged();
    partial void OnSlaveStateChanging(global::HeuristicLab.Services.Hive.DataAccess.SlaveState value);
    partial void OnSlaveStateChanged();
    partial void OnCoresChanging(System.Nullable<int> value);
    partial void OnCoresChanged();
    partial void OnFreeCoresChanging(System.Nullable<int> value);
    partial void OnFreeCoresChanged();
    partial void OnFreeMemoryChanging(System.Nullable<int> value);
    partial void OnFreeMemoryChanged();
    partial void OnIsAllowedToCalculateChanging(bool value);
    partial void OnIsAllowedToCalculateChanged();
    partial void OnCpuArchitectureChanging(global::HeuristicLab.Services.Hive.DataAccess.CpuArchitecture value);
    partial void OnCpuArchitectureChanged();
    partial void OnOperatingSystemChanging(string value);
    partial void OnOperatingSystemChanged();
    partial void OnLastHeartbeatChanging(System.Nullable<System.DateTime> value);
    partial void OnLastHeartbeatChanged();
    partial void OnCpuUtilizationChanging(double value);
    partial void OnCpuUtilizationChanged();
    partial void OnIsDisposableChanging(System.Nullable<bool> value);
    partial void OnIsDisposableChanged();
    #endregion
		
		public Slave()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPUSpeed", DbType="Int")]
		public System.Nullable<int> CpuSpeed
		{
			get
			{
				return this._CPUSpeed;
			}
			set
			{
				if ((this._CPUSpeed != value))
				{
					this.OnCpuSpeedChanging(value);
					this.SendPropertyChanging();
					this._CPUSpeed = value;
					this.SendPropertyChanged("CpuSpeed");
					this.OnCpuSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Memory", DbType="Int")]
		public System.Nullable<int> Memory
		{
			get
			{
				return this._Memory;
			}
			set
			{
				if ((this._Memory != value))
				{
					this.OnMemoryChanging(value);
					this.SendPropertyChanging();
					this._Memory = value;
					this.SendPropertyChanged("Memory");
					this.OnMemoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="DateTime")]
		public System.Nullable<System.DateTime> Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(15)", CanBeNull=true)]
		public global::HeuristicLab.Services.Hive.DataAccess.SlaveState SlaveState
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnSlaveStateChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("SlaveState");
					this.OnSlaveStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfCores", DbType="Int")]
		public System.Nullable<int> Cores
		{
			get
			{
				return this._NumberOfCores;
			}
			set
			{
				if ((this._NumberOfCores != value))
				{
					this.OnCoresChanging(value);
					this.SendPropertyChanging();
					this._NumberOfCores = value;
					this.SendPropertyChanged("Cores");
					this.OnCoresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfFreeCores", DbType="Int")]
		public System.Nullable<int> FreeCores
		{
			get
			{
				return this._NumberOfFreeCores;
			}
			set
			{
				if ((this._NumberOfFreeCores != value))
				{
					this.OnFreeCoresChanging(value);
					this.SendPropertyChanging();
					this._NumberOfFreeCores = value;
					this.SendPropertyChanged("FreeCores");
					this.OnFreeCoresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreeMemory", DbType="Int")]
		public System.Nullable<int> FreeMemory
		{
			get
			{
				return this._FreeMemory;
			}
			set
			{
				if ((this._FreeMemory != value))
				{
					this.OnFreeMemoryChanging(value);
					this.SendPropertyChanging();
					this._FreeMemory = value;
					this.SendPropertyChanged("FreeMemory");
					this.OnFreeMemoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAllowedToCalculate", DbType="Bit")]
		public bool IsAllowedToCalculate
		{
			get
			{
				return this._IsAllowedToCalculate;
			}
			set
			{
				if ((this._IsAllowedToCalculate != value))
				{
					this.OnIsAllowedToCalculateChanging(value);
					this.SendPropertyChanging();
					this._IsAllowedToCalculate = value;
					this.SendPropertyChanged("IsAllowedToCalculate");
					this.OnIsAllowedToCalculateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CpuArchitecture", DbType="VarChar(3)", CanBeNull=false)]
		public global::HeuristicLab.Services.Hive.DataAccess.CpuArchitecture CpuArchitecture
		{
			get
			{
				return this._CpuArchitecture;
			}
			set
			{
				if ((this._CpuArchitecture != value))
				{
					this.OnCpuArchitectureChanging(value);
					this.SendPropertyChanging();
					this._CpuArchitecture = value;
					this.SendPropertyChanged("CpuArchitecture");
					this.OnCpuArchitectureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatingSystem", DbType="VarChar(MAX)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OperatingSystem
		{
			get
			{
				return this._OperatingSystem;
			}
			set
			{
				if ((this._OperatingSystem != value))
				{
					this.OnOperatingSystemChanging(value);
					this.SendPropertyChanging();
					this._OperatingSystem = value;
					this.SendPropertyChanged("OperatingSystem");
					this.OnOperatingSystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastHeartbeat", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastHeartbeat
		{
			get
			{
				return this._LastHeartbeat;
			}
			set
			{
				if ((this._LastHeartbeat != value))
				{
					this.OnLastHeartbeatChanging(value);
					this.SendPropertyChanging();
					this._LastHeartbeat = value;
					this.SendPropertyChanged("LastHeartbeat");
					this.OnLastHeartbeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CpuUtilization", DbType="float")]
		public double CpuUtilization
		{
			get
			{
				return this._CpuUtilization;
			}
			set
			{
				if ((this._CpuUtilization != value))
				{
					this.OnCpuUtilizationChanging(value);
					this.SendPropertyChanging();
					this._CpuUtilization = value;
					this.SendPropertyChanged("CpuUtilization");
					this.OnCpuUtilizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisposable", DbType="Bit")]
		public System.Nullable<bool> IsDisposable
		{
			get
			{
				return this._IsDisposable;
			}
			set
			{
				if ((this._IsDisposable != value))
				{
					this.OnIsDisposableChanging(value);
					this.SendPropertyChanging();
					this._IsDisposable = value;
					this.SendPropertyChanged("IsDisposable");
					this.OnIsDisposableChanged();
				}
			}
		}
	}
	
	public partial class SlaveGroup : Resource
	{
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public SlaveGroup()
		{
			OnCreated();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobId;
		
		private global::HeuristicLab.Services.Hive.DataAccess.TaskState _State;
		
		private double _ExecutionTime;
		
		private System.Nullable<System.DateTime> _LastHeartbeat;
		
		private System.Nullable<System.Guid> _ParentJobId;
		
		private int _Priority;
		
		private int _CoresNeeded;
		
		private int _MemoryNeeded;
		
		private bool _IsParentJob;
		
		private bool _FinishWhenChildJobsFinished;
		
		private global::HeuristicLab.Services.Hive.DataAccess.Command? _Command;
		
		private System.Guid _HiveExperimentId;
		
		private EntitySet<AssignedResource> _AssignedResources;
		
		private EntitySet<RequiredPlugin> _RequiredPlugins;
		
		private EntitySet<Task> _Jobs;
		
		private EntityRef<TaskData> _JobData;
		
		private EntitySet<StateLog> _StateLogs;
		
		private EntityRef<Task> _Job1;
		
		private EntityRef<Job> _HiveExperiment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(System.Guid value);
    partial void OnTaskIdChanged();
    partial void OnStateChanging(global::HeuristicLab.Services.Hive.DataAccess.TaskState value);
    partial void OnStateChanged();
    partial void OnExecutionTimeMsChanging(double value);
    partial void OnExecutionTimeMsChanged();
    partial void OnLastHeartbeatChanging(System.Nullable<System.DateTime> value);
    partial void OnLastHeartbeatChanged();
    partial void OnParentTaskIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentTaskIdChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnCoresNeededChanging(int value);
    partial void OnCoresNeededChanged();
    partial void OnMemoryNeededChanging(int value);
    partial void OnMemoryNeededChanged();
    partial void OnIsParentTaskChanging(bool value);
    partial void OnIsParentTaskChanged();
    partial void OnFinishWhenChildJobsFinishedChanging(bool value);
    partial void OnFinishWhenChildJobsFinishedChanged();
    partial void OnCommandChanging(global::HeuristicLab.Services.Hive.DataAccess.Command? value);
    partial void OnCommandChanged();
    partial void OnJobIdChanging(System.Guid value);
    partial void OnJobIdChanged();
    #endregion
		
		public Task()
		{
			this._AssignedResources = new EntitySet<AssignedResource>(new Action<AssignedResource>(this.attach_AssignedResources), new Action<AssignedResource>(this.detach_AssignedResources));
			this._RequiredPlugins = new EntitySet<RequiredPlugin>(new Action<RequiredPlugin>(this.attach_RequiredPlugins), new Action<RequiredPlugin>(this.detach_RequiredPlugins));
			this._Jobs = new EntitySet<Task>(new Action<Task>(this.attach_Jobs), new Action<Task>(this.detach_Jobs));
			this._JobData = default(EntityRef<TaskData>);
			this._StateLogs = new EntitySet<StateLog>(new Action<StateLog>(this.attach_StateLogs), new Action<StateLog>(this.detach_StateLogs));
			this._Job1 = default(EntityRef<Task>);
			this._HiveExperiment = default(EntityRef<Job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid TaskId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TaskState", Storage="_State", DbType="VarChar(30)", CanBeNull=false)]
		public global::HeuristicLab.Services.Hive.DataAccess.TaskState State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTime", DbType="float")]
		public double ExecutionTimeMs
		{
			get
			{
				return this._ExecutionTime;
			}
			set
			{
				if ((this._ExecutionTime != value))
				{
					this.OnExecutionTimeMsChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTime = value;
					this.SendPropertyChanged("ExecutionTimeMs");
					this.OnExecutionTimeMsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastHeartbeat", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastHeartbeat
		{
			get
			{
				return this._LastHeartbeat;
			}
			set
			{
				if ((this._LastHeartbeat != value))
				{
					this.OnLastHeartbeatChanging(value);
					this.SendPropertyChanging();
					this._LastHeartbeat = value;
					this.SendPropertyChanged("LastHeartbeat");
					this.OnLastHeartbeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentJobId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentTaskId
		{
			get
			{
				return this._ParentJobId;
			}
			set
			{
				if ((this._ParentJobId != value))
				{
					if (this._Job1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentTaskIdChanging(value);
					this.SendPropertyChanging();
					this._ParentJobId = value;
					this.SendPropertyChanged("ParentTaskId");
					this.OnParentTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoresNeeded", DbType="Int NOT NULL")]
		public int CoresNeeded
		{
			get
			{
				return this._CoresNeeded;
			}
			set
			{
				if ((this._CoresNeeded != value))
				{
					this.OnCoresNeededChanging(value);
					this.SendPropertyChanging();
					this._CoresNeeded = value;
					this.SendPropertyChanged("CoresNeeded");
					this.OnCoresNeededChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemoryNeeded", DbType="Int NOT NULL")]
		public int MemoryNeeded
		{
			get
			{
				return this._MemoryNeeded;
			}
			set
			{
				if ((this._MemoryNeeded != value))
				{
					this.OnMemoryNeededChanging(value);
					this.SendPropertyChanging();
					this._MemoryNeeded = value;
					this.SendPropertyChanged("MemoryNeeded");
					this.OnMemoryNeededChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsParentJob", DbType="Bit")]
		public bool IsParentTask
		{
			get
			{
				return this._IsParentJob;
			}
			set
			{
				if ((this._IsParentJob != value))
				{
					this.OnIsParentTaskChanging(value);
					this.SendPropertyChanging();
					this._IsParentJob = value;
					this.SendPropertyChanged("IsParentTask");
					this.OnIsParentTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishWhenChildJobsFinished", DbType="Bit")]
		public bool FinishWhenChildJobsFinished
		{
			get
			{
				return this._FinishWhenChildJobsFinished;
			}
			set
			{
				if ((this._FinishWhenChildJobsFinished != value))
				{
					this.OnFinishWhenChildJobsFinishedChanging(value);
					this.SendPropertyChanging();
					this._FinishWhenChildJobsFinished = value;
					this.SendPropertyChanged("FinishWhenChildJobsFinished");
					this.OnFinishWhenChildJobsFinishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Command", DbType="VarChar(30)", CanBeNull=true)]
		public global::HeuristicLab.Services.Hive.DataAccess.Command? Command
		{
			get
			{
				return this._Command;
			}
			set
			{
				if ((this._Command != value))
				{
					this.OnCommandChanging(value);
					this.SendPropertyChanging();
					this._Command = value;
					this.SendPropertyChanged("Command");
					this.OnCommandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HiveExperimentId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid JobId
		{
			get
			{
				return this._HiveExperimentId;
			}
			set
			{
				if ((this._HiveExperimentId != value))
				{
					if (this._HiveExperiment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._HiveExperimentId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_AssignedResource", Storage="_AssignedResources", ThisKey="TaskId", OtherKey="TaskId")]
		public EntitySet<AssignedResource> AssignedResources
		{
			get
			{
				return this._AssignedResources;
			}
			set
			{
				this._AssignedResources.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_RequiredPlugin", Storage="_RequiredPlugins", ThisKey="TaskId", OtherKey="TaskId")]
		public EntitySet<RequiredPlugin> RequiredPlugins
		{
			get
			{
				return this._RequiredPlugins;
			}
			set
			{
				this._RequiredPlugins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Task", Storage="_Jobs", ThisKey="TaskId", OtherKey="ParentTaskId")]
		public EntitySet<Task> ChildJobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskData", Storage="_JobData", ThisKey="TaskId", OtherKey="TaskId", IsUnique=true, IsForeignKey=false)]
		public TaskData JobData
		{
			get
			{
				return this._JobData.Entity;
			}
			set
			{
				TaskData previousValue = this._JobData.Entity;
				if (((previousValue != value) 
							|| (this._JobData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobData.Entity = null;
						previousValue.Task = null;
					}
					this._JobData.Entity = value;
					if ((value != null))
					{
						value.Task = this;
					}
					this.SendPropertyChanged("JobData");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_StateLog", Storage="_StateLogs", ThisKey="TaskId", OtherKey="TaskId")]
		public EntitySet<StateLog> StateLogs
		{
			get
			{
				return this._StateLogs;
			}
			set
			{
				this._StateLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Task", Storage="_Job1", ThisKey="ParentTaskId", OtherKey="TaskId", IsForeignKey=true)]
		public Task ParentJob
		{
			get
			{
				return this._Job1.Entity;
			}
			set
			{
				Task previousValue = this._Job1.Entity;
				if (((previousValue != value) 
							|| (this._Job1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job1.Entity = null;
						previousValue.ChildJobs.Remove(this);
					}
					this._Job1.Entity = value;
					if ((value != null))
					{
						value.ChildJobs.Add(this);
						this._ParentJobId = value.TaskId;
					}
					else
					{
						this._ParentJobId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ParentJob");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Task", Storage="_HiveExperiment", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._HiveExperiment.Entity;
			}
			set
			{
				Job previousValue = this._HiveExperiment.Entity;
				if (((previousValue != value) 
							|| (this._HiveExperiment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HiveExperiment.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._HiveExperiment.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._HiveExperimentId = value.JobId;
					}
					else
					{
						this._HiveExperimentId = default(System.Guid);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssignedResources(AssignedResource entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_AssignedResources(AssignedResource entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_RequiredPlugins(RequiredPlugin entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_RequiredPlugins(RequiredPlugin entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_Jobs(Task entity)
		{
			this.SendPropertyChanging();
			entity.ParentJob = this;
		}
		
		private void detach_Jobs(Task entity)
		{
			this.SendPropertyChanging();
			entity.ParentJob = null;
		}
		
		private void attach_StateLogs(StateLog entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_StateLogs(StateLog entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Downtime")]
	public partial class Downtime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UptimeCalendarId;
		
		private System.Guid _ResourceId;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private bool _AllDayEvent;
		
		private bool _Recurring;
		
		private System.Guid _RecurringId;
		
		private global::HeuristicLab.Services.Hive.DataAccess.DowntimeType _Type;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDowntimeIdChanging(System.Guid value);
    partial void OnDowntimeIdChanged();
    partial void OnResourceIdChanging(System.Guid value);
    partial void OnResourceIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnAllDayEventChanging(bool value);
    partial void OnAllDayEventChanged();
    partial void OnRecurringChanging(bool value);
    partial void OnRecurringChanged();
    partial void OnRecurringIdChanging(System.Guid value);
    partial void OnRecurringIdChanged();
    partial void OnDowntimeTypeChanging(global::HeuristicLab.Services.Hive.DataAccess.DowntimeType value);
    partial void OnDowntimeTypeChanged();
    #endregion
		
		public Downtime()
		{
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UptimeCalendarId", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid DowntimeId
		{
			get
			{
				return this._UptimeCalendarId;
			}
			set
			{
				if ((this._UptimeCalendarId != value))
				{
					this.OnDowntimeIdChanging(value);
					this.SendPropertyChanging();
					this._UptimeCalendarId = value;
					this.SendPropertyChanged("DowntimeId");
					this.OnDowntimeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceId", DbType="UniqueIdentifier")]
		public System.Guid ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllDayEvent", DbType="Bit")]
		public bool AllDayEvent
		{
			get
			{
				return this._AllDayEvent;
			}
			set
			{
				if ((this._AllDayEvent != value))
				{
					this.OnAllDayEventChanging(value);
					this.SendPropertyChanging();
					this._AllDayEvent = value;
					this.SendPropertyChanged("AllDayEvent");
					this.OnAllDayEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recurring", DbType="Bit")]
		public bool Recurring
		{
			get
			{
				return this._Recurring;
			}
			set
			{
				if ((this._Recurring != value))
				{
					this.OnRecurringChanging(value);
					this.SendPropertyChanging();
					this._Recurring = value;
					this.SendPropertyChanged("Recurring");
					this.OnRecurringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecurringId", DbType="UniqueIdentifier")]
		public System.Guid RecurringId
		{
			get
			{
				return this._RecurringId;
			}
			set
			{
				if ((this._RecurringId != value))
				{
					this.OnRecurringIdChanging(value);
					this.SendPropertyChanging();
					this._RecurringId = value;
					this.SendPropertyChanged("RecurringId");
					this.OnRecurringIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(MAX)", CanBeNull=false)]
		public global::HeuristicLab.Services.Hive.DataAccess.DowntimeType DowntimeType
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnDowntimeTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("DowntimeType");
					this.OnDowntimeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_Downtime", Storage="_Resource", ThisKey="ResourceId", OtherKey="ResourceId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.Downtimes.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.Downtimes.Add(this);
						this._ResourceId = value.ResourceId;
					}
					else
					{
						this._ResourceId = default(System.Guid);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _HiveExperimentId;
		
		private string _Name;
		
		private string _Description;
		
		private string _ResourceIds;
		
		private System.Guid _UserId;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<Task> _Jobs;
		
		private EntitySet<JobPermission> _HiveExperimentPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIdChanging(System.Guid value);
    partial void OnJobIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnResourceIdsChanging(string value);
    partial void OnResourceIdsChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Job()
		{
			this._Jobs = new EntitySet<Task>(new Action<Task>(this.attach_Jobs), new Action<Task>(this.detach_Jobs));
			this._HiveExperimentPermissions = new EntitySet<JobPermission>(new Action<JobPermission>(this.attach_HiveExperimentPermissions), new Action<JobPermission>(this.detach_HiveExperimentPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HiveExperimentId", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid JobId
		{
			get
			{
				return this._HiveExperimentId;
			}
			set
			{
				if ((this._HiveExperimentId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._HiveExperimentId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceIds", DbType="VarChar(MAX)")]
		public string ResourceIds
		{
			get
			{
				return this._ResourceIds;
			}
			set
			{
				if ((this._ResourceIds != value))
				{
					this.OnResourceIdsChanging(value);
					this.SendPropertyChanging();
					this._ResourceIds = value;
					this.SendPropertyChanged("ResourceIds");
					this.OnResourceIdsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Task", Storage="_Jobs", ThisKey="JobId", OtherKey="JobId")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobPermission", Storage="_HiveExperimentPermissions", ThisKey="JobId", OtherKey="JobId")]
		public EntitySet<JobPermission> JobPermissions
		{
			get
			{
				return this._HiveExperimentPermissions;
			}
			set
			{
				this._HiveExperimentPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Jobs(Task entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_Jobs(Task entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_HiveExperimentPermissions(JobPermission entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_HiveExperimentPermissions(JobPermission entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskData")]
	public partial class TaskData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobId;
		
		private System.Data.Linq.Link<byte[]> _Data;
		
		private System.DateTime _LastUpdate;
		
		private EntityRef<Task> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(System.Guid value);
    partial void OnTaskIdChanged();
    partial void OnDataChanging(byte[] value);
    partial void OnDataChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public TaskData()
		{
			this._Job = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TaskId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="VarBinary(MAX)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public byte[] Data
		{
			get
			{
				return this._Data.Value;
			}
			set
			{
				if ((this._Data.Value != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data.Value = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskData", Storage="_Job", ThisKey="TaskId", OtherKey="TaskId", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Task previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.JobData = null;
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.JobData = this;
						this._JobId = value.TaskId;
					}
					else
					{
						this._JobId = default(System.Guid);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PluginData")]
	public partial class PluginData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PluginDataId;
		
		private System.Guid _PluginId;
		
		private System.Data.Linq.Link<byte[]> _Data;
		
		private string _FileName;
		
		private EntityRef<Plugin> _Plugin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPluginDataIdChanging(System.Guid value);
    partial void OnPluginDataIdChanged();
    partial void OnPluginIdChanging(System.Guid value);
    partial void OnPluginIdChanged();
    partial void OnDataChanging(byte[] value);
    partial void OnDataChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    #endregion
		
		public PluginData()
		{
			this._Plugin = default(EntityRef<Plugin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PluginDataId", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid PluginDataId
		{
			get
			{
				return this._PluginDataId;
			}
			set
			{
				if ((this._PluginDataId != value))
				{
					this.OnPluginDataIdChanging(value);
					this.SendPropertyChanging();
					this._PluginDataId = value;
					this.SendPropertyChanged("PluginDataId");
					this.OnPluginDataIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PluginId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PluginId
		{
			get
			{
				return this._PluginId;
			}
			set
			{
				if ((this._PluginId != value))
				{
					if (this._Plugin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPluginIdChanging(value);
					this.SendPropertyChanging();
					this._PluginId = value;
					this.SendPropertyChanged("PluginId");
					this.OnPluginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public byte[] Data
		{
			get
			{
				return this._Data.Value;
			}
			set
			{
				if ((this._Data.Value != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data.Value = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(MAX)", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plugin_PluginData", Storage="_Plugin", ThisKey="PluginId", OtherKey="PluginId", IsForeignKey=true)]
		public Plugin Plugin
		{
			get
			{
				return this._Plugin.Entity;
			}
			set
			{
				Plugin previousValue = this._Plugin.Entity;
				if (((previousValue != value) 
							|| (this._Plugin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plugin.Entity = null;
						previousValue.PluginData.Remove(this);
					}
					this._Plugin.Entity = value;
					if ((value != null))
					{
						value.PluginData.Add(this);
						this._PluginId = value.PluginId;
					}
					else
					{
						this._PluginId = default(System.Guid);
					}
					this.SendPropertyChanged("Plugin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StateLog")]
	public partial class StateLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _StateLogId;
		
		private global::HeuristicLab.Services.Hive.DataAccess.TaskState _State;
		
		private System.DateTime _DateTime;
		
		private System.Guid _JobId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<System.Guid> _SlaveId;
		
		private string _Exception;
		
		private EntityRef<Task> _Job;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateLogIdChanging(System.Guid value);
    partial void OnStateLogIdChanged();
    partial void OnStateChanging(global::HeuristicLab.Services.Hive.DataAccess.TaskState value);
    partial void OnStateChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnTaskIdChanging(System.Guid value);
    partial void OnTaskIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnSlaveIdChanging(System.Nullable<System.Guid> value);
    partial void OnSlaveIdChanged();
    partial void OnExceptionChanging(string value);
    partial void OnExceptionChanged();
    #endregion
		
		public StateLog()
		{
			this._Job = default(EntityRef<Task>);
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateLogId", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid StateLogId
		{
			get
			{
				return this._StateLogId;
			}
			set
			{
				if ((this._StateLogId != value))
				{
					this.OnStateLogIdChanging(value);
					this.SendPropertyChanging();
					this._StateLogId = value;
					this.SendPropertyChanged("StateLogId");
					this.OnStateLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public global::HeuristicLab.Services.Hive.DataAccess.TaskState State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TaskId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlaveId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SlaveId
		{
			get
			{
				return this._SlaveId;
			}
			set
			{
				if ((this._SlaveId != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSlaveIdChanging(value);
					this.SendPropertyChanging();
					this._SlaveId = value;
					this.SendPropertyChanged("SlaveId");
					this.OnSlaveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exception", DbType="VarChar(MAX)", CanBeNull=false)]
		public string Exception
		{
			get
			{
				return this._Exception;
			}
			set
			{
				if ((this._Exception != value))
				{
					this.OnExceptionChanging(value);
					this.SendPropertyChanging();
					this._Exception = value;
					this.SendPropertyChanged("Exception");
					this.OnExceptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_StateLog", Storage="_Job", ThisKey="TaskId", OtherKey="TaskId", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Task previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.StateLogs.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.StateLogs.Add(this);
						this._JobId = value.TaskId;
					}
					else
					{
						this._JobId = default(System.Guid);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_StateLog", Storage="_Resource", ThisKey="SlaveId", OtherKey="ResourceId", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.StateLogs.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.StateLogs.Add(this);
						this._SlaveId = value.ResourceId;
					}
					else
					{
						this._SlaveId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobPermission")]
	public partial class JobPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _HiveExperimentId;
		
		private System.Guid _GrantedUserId;
		
		private System.Guid _GrantedByUserId;
		
		private global::HeuristicLab.Services.Hive.DataAccess.Permission _Permission;
		
		private EntityRef<Job> _HiveExperiment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIdChanging(System.Guid value);
    partial void OnJobIdChanged();
    partial void OnGrantedUserIdChanging(System.Guid value);
    partial void OnGrantedUserIdChanged();
    partial void OnGrantedByUserIdChanging(System.Guid value);
    partial void OnGrantedByUserIdChanged();
    partial void OnPermissionChanging(global::HeuristicLab.Services.Hive.DataAccess.Permission value);
    partial void OnPermissionChanged();
    #endregion
		
		public JobPermission()
		{
			this._HiveExperiment = default(EntityRef<Job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HiveExperimentId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobId
		{
			get
			{
				return this._HiveExperimentId;
			}
			set
			{
				if ((this._HiveExperimentId != value))
				{
					if (this._HiveExperiment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._HiveExperimentId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantedUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GrantedUserId
		{
			get
			{
				return this._GrantedUserId;
			}
			set
			{
				if ((this._GrantedUserId != value))
				{
					this.OnGrantedUserIdChanging(value);
					this.SendPropertyChanging();
					this._GrantedUserId = value;
					this.SendPropertyChanged("GrantedUserId");
					this.OnGrantedUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantedByUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GrantedByUserId
		{
			get
			{
				return this._GrantedByUserId;
			}
			set
			{
				if ((this._GrantedByUserId != value))
				{
					this.OnGrantedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._GrantedByUserId = value;
					this.SendPropertyChanged("GrantedByUserId");
					this.OnGrantedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public global::HeuristicLab.Services.Hive.DataAccess.Permission Permission
		{
			get
			{
				return this._Permission;
			}
			set
			{
				if ((this._Permission != value))
				{
					this.OnPermissionChanging(value);
					this.SendPropertyChanging();
					this._Permission = value;
					this.SendPropertyChanged("Permission");
					this.OnPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobPermission", Storage="_HiveExperiment", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._HiveExperiment.Entity;
			}
			set
			{
				Job previousValue = this._HiveExperiment.Entity;
				if (((previousValue != value) 
							|| (this._HiveExperiment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HiveExperiment.Entity = null;
						previousValue.JobPermissions.Remove(this);
					}
					this._HiveExperiment.Entity = value;
					if ((value != null))
					{
						value.JobPermissions.Add(this);
						this._HiveExperimentId = value.JobId;
					}
					else
					{
						this._HiveExperimentId = default(System.Guid);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class Lifecycle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LifecycleId;
		
		private System.DateTime _LastCleanup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLifecycleIdChanging(int value);
    partial void OnLifecycleIdChanged();
    partial void OnLastCleanupChanging(System.DateTime value);
    partial void OnLastCleanupChanged();
    #endregion
		
		public Lifecycle()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LifecycleId", DbType="Int", IsPrimaryKey=true)]
		public int LifecycleId
		{
			get
			{
				return this._LifecycleId;
			}
			set
			{
				if ((this._LifecycleId != value))
				{
					this.OnLifecycleIdChanging(value);
					this.SendPropertyChanging();
					this._LifecycleId = value;
					this.SendPropertyChanged("LifecycleId");
					this.OnLifecycleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastCleanup", DbType="DateTime")]
		public System.DateTime LastCleanup
		{
			get
			{
				return this._LastCleanup;
			}
			set
			{
				if ((this._LastCleanup != value))
				{
					this.OnLastCleanupChanging(value);
					this.SendPropertyChanging();
					this._LastCleanup = value;
					this.SendPropertyChanged("LastCleanup");
					this.OnLastCleanupChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourcePermission")]
	public partial class ResourcePermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ResourceId;
		
		private System.Guid _GrantedUserId;
		
		private System.Guid _GrantedByUserId;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIdChanging(System.Guid value);
    partial void OnResourceIdChanged();
    partial void OnGrantedUserIdChanging(System.Guid value);
    partial void OnGrantedUserIdChanged();
    partial void OnGrantedByUserIdChanging(System.Guid value);
    partial void OnGrantedByUserIdChanged();
    #endregion
		
		public ResourcePermission()
		{
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantedUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GrantedUserId
		{
			get
			{
				return this._GrantedUserId;
			}
			set
			{
				if ((this._GrantedUserId != value))
				{
					this.OnGrantedUserIdChanging(value);
					this.SendPropertyChanging();
					this._GrantedUserId = value;
					this.SendPropertyChanged("GrantedUserId");
					this.OnGrantedUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantedByUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GrantedByUserId
		{
			get
			{
				return this._GrantedByUserId;
			}
			set
			{
				if ((this._GrantedByUserId != value))
				{
					this.OnGrantedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._GrantedByUserId = value;
					this.SendPropertyChanged("GrantedByUserId");
					this.OnGrantedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourcePermission", Storage="_Resource", ThisKey="ResourceId", OtherKey="ResourceId", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.ResourcePermissions.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.ResourcePermissions.Add(this);
						this._ResourceId = value.ResourceId;
					}
					else
					{
						this._ResourceId = default(System.Guid);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class UserPriority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.DateTime _DateEnqueued;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnDateEnqueuedChanging(System.DateTime value);
    partial void OnDateEnqueuedChanged();
    #endregion
		
		public UserPriority()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnqueued", DbType="DateTime NOT NULL")]
		public System.DateTime DateEnqueued
		{
			get
			{
				return this._DateEnqueued;
			}
			set
			{
				if ((this._DateEnqueued != value))
				{
					this.OnDateEnqueuedChanging(value);
					this.SendPropertyChanging();
					this._DateEnqueued = value;
					this.SendPropertyChanged("DateEnqueued");
					this.OnDateEnqueuedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[statistics].DimClient")]
	public partial class DimClient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Guid _ResourceId;
		
		private System.Nullable<System.DateTime> _ExpirationTime;
		
		private System.Nullable<System.Guid> _ResourceGroupId;
		
		private System.Nullable<System.Guid> _ResourceGroup2Id;
		
		private string _GroupName;
		
		private string _GroupName2;
		
		private EntitySet<FactTask> _FactTasks;
		
		private EntitySet<FactClientInfo> _FactClientInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnResourceIdChanging(System.Guid value);
    partial void OnResourceIdChanged();
    partial void OnExpirationTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationTimeChanged();
    partial void OnResourceGroupIdChanging(System.Nullable<System.Guid> value);
    partial void OnResourceGroupIdChanged();
    partial void OnResourceGroup2IdChanging(System.Nullable<System.Guid> value);
    partial void OnResourceGroup2IdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnGroupName2Changing(string value);
    partial void OnGroupName2Changed();
    #endregion
		
		public DimClient()
		{
			this._FactTasks = new EntitySet<FactTask>(new Action<FactTask>(this.attach_FactTasks), new Action<FactTask>(this.detach_FactTasks));
			this._FactClientInfos = new EntitySet<FactClientInfo>(new Action<FactClientInfo>(this.attach_FactClientInfos), new Action<FactClientInfo>(this.detach_FactClientInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpirationTime
		{
			get
			{
				return this._ExpirationTime;
			}
			set
			{
				if ((this._ExpirationTime != value))
				{
					this.OnExpirationTimeChanging(value);
					this.SendPropertyChanging();
					this._ExpirationTime = value;
					this.SendPropertyChanged("ExpirationTime");
					this.OnExpirationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceGroupId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ResourceGroupId
		{
			get
			{
				return this._ResourceGroupId;
			}
			set
			{
				if ((this._ResourceGroupId != value))
				{
					this.OnResourceGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceGroupId = value;
					this.SendPropertyChanged("ResourceGroupId");
					this.OnResourceGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceGroup2Id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ResourceGroup2Id
		{
			get
			{
				return this._ResourceGroup2Id;
			}
			set
			{
				if ((this._ResourceGroup2Id != value))
				{
					this.OnResourceGroup2IdChanging(value);
					this.SendPropertyChanging();
					this._ResourceGroup2Id = value;
					this.SendPropertyChanged("ResourceGroup2Id");
					this.OnResourceGroup2IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName2")]
		public string GroupName2
		{
			get
			{
				return this._GroupName2;
			}
			set
			{
				if ((this._GroupName2 != value))
				{
					this.OnGroupName2Changing(value);
					this.SendPropertyChanging();
					this._GroupName2 = value;
					this.SendPropertyChanged("GroupName2");
					this.OnGroupName2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimClient_FactTask", Storage="_FactTasks", ThisKey="Id", OtherKey="LastClientId")]
		public EntitySet<FactTask> FactTasks
		{
			get
			{
				return this._FactTasks;
			}
			set
			{
				this._FactTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimClient_FactClientInfo", Storage="_FactClientInfos", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<FactClientInfo> FactClientInfos
		{
			get
			{
				return this._FactClientInfos;
			}
			set
			{
				this._FactClientInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactTasks(FactTask entity)
		{
			this.SendPropertyChanging();
			entity.DimClient = this;
		}
		
		private void detach_FactTasks(FactTask entity)
		{
			this.SendPropertyChanging();
			entity.DimClient = null;
		}
		
		private void attach_FactClientInfos(FactClientInfo entity)
		{
			this.SendPropertyChanging();
			entity.DimClient = this;
		}
		
		private void detach_FactClientInfos(FactClientInfo entity)
		{
			this.SendPropertyChanging();
			entity.DimClient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[statistics].FactTask")]
	public partial class FactTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TaskId;
		
		private long _TotalRuntime;
		
		private long _TotalWaitingTime;
		
		private long _TotalTransferTime;
		
		private int _NumCalculationRuns;
		
		private int _NumFails;
		
		private int _CoresRequired;
		
		private int _MemoryRequired;
		
		private int _Priority;
		
		private System.Nullable<System.Guid> _LastClientId;
		
		private System.Guid _JobId;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private global::HeuristicLab.Services.Hive.DataAccess.TaskState _TaskState;
		
		private string _Exception;
		
		private long _InitialWaitingTimeMs;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private EntityRef<DimClient> _DimClient;
		
		private EntityRef<DimJob> _DimJob;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(System.Guid value);
    partial void OnTaskIdChanged();
    partial void OnCalculatingTimeChanging(long value);
    partial void OnCalculatingTimeChanged();
    partial void OnWaitingTimeChanging(long value);
    partial void OnWaitingTimeChanged();
    partial void OnTransferTimeChanging(long value);
    partial void OnTransferTimeChanged();
    partial void OnNumCalculationRunsChanging(int value);
    partial void OnNumCalculationRunsChanged();
    partial void OnNumRetriesChanging(int value);
    partial void OnNumRetriesChanged();
    partial void OnCoresRequiredChanging(int value);
    partial void OnCoresRequiredChanged();
    partial void OnMemoryRequiredChanging(int value);
    partial void OnMemoryRequiredChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnLastClientIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastClientIdChanged();
    partial void OnJobIdChanging(System.Guid value);
    partial void OnJobIdChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnTaskStateChanging(global::HeuristicLab.Services.Hive.DataAccess.TaskState value);
    partial void OnTaskStateChanged();
    partial void OnExceptionChanging(string value);
    partial void OnExceptionChanged();
    partial void OnInitialWaitingTimeChanging(long value);
    partial void OnInitialWaitingTimeChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    #endregion
		
		public FactTask()
		{
			this._DimClient = default(EntityRef<DimClient>);
			this._DimJob = default(EntityRef<DimJob>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalRuntime", DbType="INT NOT NULL")]
		public long CalculatingTime
		{
			get
			{
				return this._TotalRuntime;
			}
			set
			{
				if ((this._TotalRuntime != value))
				{
					this.OnCalculatingTimeChanging(value);
					this.SendPropertyChanging();
					this._TotalRuntime = value;
					this.SendPropertyChanged("CalculatingTime");
					this.OnCalculatingTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalWaitingTime", DbType="INT NOT NULL")]
		public long WaitingTime
		{
			get
			{
				return this._TotalWaitingTime;
			}
			set
			{
				if ((this._TotalWaitingTime != value))
				{
					this.OnWaitingTimeChanging(value);
					this.SendPropertyChanging();
					this._TotalWaitingTime = value;
					this.SendPropertyChanged("WaitingTime");
					this.OnWaitingTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTransferTime", DbType="INT NOT NULL")]
		public long TransferTime
		{
			get
			{
				return this._TotalTransferTime;
			}
			set
			{
				if ((this._TotalTransferTime != value))
				{
					this.OnTransferTimeChanging(value);
					this.SendPropertyChanging();
					this._TotalTransferTime = value;
					this.SendPropertyChanged("TransferTime");
					this.OnTransferTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumCalculationRuns", DbType="Int NOT NULL")]
		public int NumCalculationRuns
		{
			get
			{
				return this._NumCalculationRuns;
			}
			set
			{
				if ((this._NumCalculationRuns != value))
				{
					this.OnNumCalculationRunsChanging(value);
					this.SendPropertyChanging();
					this._NumCalculationRuns = value;
					this.SendPropertyChanged("NumCalculationRuns");
					this.OnNumCalculationRunsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumFails", DbType="Int NOT NULL")]
		public int NumRetries
		{
			get
			{
				return this._NumFails;
			}
			set
			{
				if ((this._NumFails != value))
				{
					this.OnNumRetriesChanging(value);
					this.SendPropertyChanging();
					this._NumFails = value;
					this.SendPropertyChanged("NumRetries");
					this.OnNumRetriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoresRequired", DbType="Int NOT NULL")]
		public int CoresRequired
		{
			get
			{
				return this._CoresRequired;
			}
			set
			{
				if ((this._CoresRequired != value))
				{
					this.OnCoresRequiredChanging(value);
					this.SendPropertyChanging();
					this._CoresRequired = value;
					this.SendPropertyChanged("CoresRequired");
					this.OnCoresRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemoryRequired", DbType="Int NOT NULL")]
		public int MemoryRequired
		{
			get
			{
				return this._MemoryRequired;
			}
			set
			{
				if ((this._MemoryRequired != value))
				{
					this.OnMemoryRequiredChanging(value);
					this.SendPropertyChanging();
					this._MemoryRequired = value;
					this.SendPropertyChanged("MemoryRequired");
					this.OnMemoryRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastClientId", DbType="UniqueIdentifier NOT NULL")]
		public System.Nullable<System.Guid> LastClientId
		{
			get
			{
				return this._LastClientId;
			}
			set
			{
				if ((this._LastClientId != value))
				{
					if (this._DimClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastClientIdChanging(value);
					this.SendPropertyChanging();
					this._LastClientId = value;
					this.SendPropertyChanged("LastClientId");
					this.OnLastClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._DimJob.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskState", DbType="varchar(30)", CanBeNull=false)]
		public global::HeuristicLab.Services.Hive.DataAccess.TaskState TaskState
		{
			get
			{
				return this._TaskState;
			}
			set
			{
				if ((this._TaskState != value))
				{
					this.OnTaskStateChanging(value);
					this.SendPropertyChanging();
					this._TaskState = value;
					this.SendPropertyChanged("TaskState");
					this.OnTaskStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exception", DbType="varchar(MAX)")]
		public string Exception
		{
			get
			{
				return this._Exception;
			}
			set
			{
				if ((this._Exception != value))
				{
					this.OnExceptionChanging(value);
					this.SendPropertyChanging();
					this._Exception = value;
					this.SendPropertyChanged("Exception");
					this.OnExceptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialWaitingTimeMs", DbType="INT")]
		public long InitialWaitingTime
		{
			get
			{
				return this._InitialWaitingTimeMs;
			}
			set
			{
				if ((this._InitialWaitingTimeMs != value))
				{
					this.OnInitialWaitingTimeChanging(value);
					this.SendPropertyChanging();
					this._InitialWaitingTimeMs = value;
					this.SendPropertyChanged("InitialWaitingTime");
					this.OnInitialWaitingTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimClient_FactTask", Storage="_DimClient", ThisKey="LastClientId", OtherKey="Id", IsForeignKey=true)]
		public DimClient DimClient
		{
			get
			{
				return this._DimClient.Entity;
			}
			set
			{
				DimClient previousValue = this._DimClient.Entity;
				if (((previousValue != value) 
							|| (this._DimClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimClient.Entity = null;
						previousValue.FactTasks.Remove(this);
					}
					this._DimClient.Entity = value;
					if ((value != null))
					{
						value.FactTasks.Add(this);
						this._LastClientId = value.Id;
					}
					else
					{
						this._LastClientId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DimClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimJob_FactTask", Storage="_DimJob", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true)]
		public DimJob DimJob
		{
			get
			{
				return this._DimJob.Entity;
			}
			set
			{
				DimJob previousValue = this._DimJob.Entity;
				if (((previousValue != value) 
							|| (this._DimJob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimJob.Entity = null;
						previousValue.FactTasks.Remove(this);
					}
					this._DimJob.Entity = value;
					if ((value != null))
					{
						value.FactTasks.Add(this);
						this._JobId = value.JobId;
					}
					else
					{
						this._JobId = default(System.Guid);
					}
					this.SendPropertyChanged("DimJob");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[statistics].DimJob")]
	public partial class DimJob : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobId;
		
		private System.Guid _UserId;
		
		private string _JobName;
		
		private string _UserName;
		
		private System.DateTime _DateCreated;
		
		private int _TotalTasks;
		
		private int _CompletedTasks;
		
		private System.Nullable<System.DateTime> _DateCompleted;
		
		private EntitySet<FactTask> _FactTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIdChanging(System.Guid value);
    partial void OnJobIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnJobNameChanging(string value);
    partial void OnJobNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnTotalTasksChanging(int value);
    partial void OnTotalTasksChanged();
    partial void OnCompletedTasksChanging(int value);
    partial void OnCompletedTasksChanged();
    partial void OnDateCompletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCompletedChanged();
    #endregion
		
		public DimJob()
		{
			this._FactTasks = new EntitySet<FactTask>(new Action<FactTask>(this.attach_FactTasks), new Action<FactTask>(this.detach_FactTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string JobName
		{
			get
			{
				return this._JobName;
			}
			set
			{
				if ((this._JobName != value))
				{
					this.OnJobNameChanging(value);
					this.SendPropertyChanging();
					this._JobName = value;
					this.SendPropertyChanged("JobName");
					this.OnJobNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTasks", DbType="INT NOT NULL")]
		public int TotalTasks
		{
			get
			{
				return this._TotalTasks;
			}
			set
			{
				if ((this._TotalTasks != value))
				{
					this.OnTotalTasksChanging(value);
					this.SendPropertyChanging();
					this._TotalTasks = value;
					this.SendPropertyChanged("TotalTasks");
					this.OnTotalTasksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletedTasks", DbType="INT NOT NULL")]
		public int CompletedTasks
		{
			get
			{
				return this._CompletedTasks;
			}
			set
			{
				if ((this._CompletedTasks != value))
				{
					this.OnCompletedTasksChanging(value);
					this.SendPropertyChanging();
					this._CompletedTasks = value;
					this.SendPropertyChanged("CompletedTasks");
					this.OnCompletedTasksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCompleted", DbType="DateTime NULL")]
		public System.Nullable<System.DateTime> DateCompleted
		{
			get
			{
				return this._DateCompleted;
			}
			set
			{
				if ((this._DateCompleted != value))
				{
					this.OnDateCompletedChanging(value);
					this.SendPropertyChanging();
					this._DateCompleted = value;
					this.SendPropertyChanged("DateCompleted");
					this.OnDateCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimJob_FactTask", Storage="_FactTasks", ThisKey="JobId", OtherKey="JobId")]
		public EntitySet<FactTask> FactTasks
		{
			get
			{
				return this._FactTasks;
			}
			set
			{
				this._FactTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactTasks(FactTask entity)
		{
			this.SendPropertyChanging();
			entity.DimJob = this;
		}
		
		private void detach_FactTasks(FactTask entity)
		{
			this.SendPropertyChanging();
			entity.DimJob = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[statistics].DimTime")]
	public partial class DimTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Time;
		
		private System.DateTime _Hour;
		
		private System.DateTime _Day;
		
		private System.DateTime _Month;
		
		private System.DateTime _Year;
		
		private System.DateTime _Minute;
		
		private EntitySet<FactClientInfo> _FactClientInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnHourChanging(System.DateTime value);
    partial void OnHourChanged();
    partial void OnDayChanging(System.DateTime value);
    partial void OnDayChanged();
    partial void OnMonthChanging(System.DateTime value);
    partial void OnMonthChanged();
    partial void OnYearChanging(System.DateTime value);
    partial void OnYearChanged();
    partial void OnMinuteChanging(System.DateTime value);
    partial void OnMinuteChanged();
    #endregion
		
		public DimTime()
		{
			this._FactClientInfos = new EntitySet<FactClientInfo>(new Action<FactClientInfo>(this.attach_FactClientInfos), new Action<FactClientInfo>(this.detach_FactClientInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hour", DbType="DateTime NOT NULL")]
		public System.DateTime Hour
		{
			get
			{
				return this._Hour;
			}
			set
			{
				if ((this._Hour != value))
				{
					this.OnHourChanging(value);
					this.SendPropertyChanging();
					this._Hour = value;
					this.SendPropertyChanged("Hour");
					this.OnHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day", DbType="Date NOT NULL")]
		public System.DateTime Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Date NOT NULL")]
		public System.DateTime Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Date NOT NULL")]
		public System.DateTime Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Minute")]
		public System.DateTime Minute
		{
			get
			{
				return this._Minute;
			}
			set
			{
				if ((this._Minute != value))
				{
					this.OnMinuteChanging(value);
					this.SendPropertyChanging();
					this._Minute = value;
					this.SendPropertyChanged("Minute");
					this.OnMinuteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTime_FactClientInfo", Storage="_FactClientInfos", ThisKey="Time", OtherKey="Time")]
		public EntitySet<FactClientInfo> FactClientInfos
		{
			get
			{
				return this._FactClientInfos;
			}
			set
			{
				this._FactClientInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactClientInfos(FactClientInfo entity)
		{
			this.SendPropertyChanging();
			entity.DimTime = this;
		}
		
		private void detach_FactClientInfos(FactClientInfo entity)
		{
			this.SendPropertyChanging();
			entity.DimTime = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[statistics].DimUser")]
	public partial class DimUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _Name;
		
		private EntitySet<FactClientInfo> _FactClientInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DimUser()
		{
			this._FactClientInfos = new EntitySet<FactClientInfo>(new Action<FactClientInfo>(this.attach_FactClientInfos), new Action<FactClientInfo>(this.detach_FactClientInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUser_FactClientInfo", Storage="_FactClientInfos", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<FactClientInfo> FactClientInfos
		{
			get
			{
				return this._FactClientInfos;
			}
			set
			{
				this._FactClientInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactClientInfos(FactClientInfo entity)
		{
			this.SendPropertyChanging();
			entity.DimUser = this;
		}
		
		private void detach_FactClientInfos(FactClientInfo entity)
		{
			this.SendPropertyChanging();
			entity.DimUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[statistics].FactClientInfo")]
	public partial class FactClientInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ClientId;
		
		private System.DateTime _Time;
		
		private System.Guid _UserId;
		
		private int _NumUsedCores;
		
		private int _NumTotalCores;
		
		private int _UsedMemory;
		
		private int _TotalMemory;
		
		private double _CpuUtilization;
		
		private long _TotalTimeIdle;
		
		private long _TotalTimeOffline;
		
		private long _TotalTimeUnavailable;
		
		private global::HeuristicLab.Services.Hive.DataAccess.SlaveState _SlaveState;
		
		private bool _IsAllowedToCalculate;
		
		private EntityRef<DimClient> _DimClient;
		
		private EntityRef<DimTime> _DimTime;
		
		private EntityRef<DimUser> _DimUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIdChanging(System.Guid value);
    partial void OnClientIdChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnNumUsedCoresChanging(int value);
    partial void OnNumUsedCoresChanged();
    partial void OnNumTotalCoresChanging(int value);
    partial void OnNumTotalCoresChanged();
    partial void OnUsedMemoryChanging(int value);
    partial void OnUsedMemoryChanged();
    partial void OnTotalMemoryChanging(int value);
    partial void OnTotalMemoryChanged();
    partial void OnCpuUtilizationChanging(double value);
    partial void OnCpuUtilizationChanged();
    partial void OnIdleTimeChanging(long value);
    partial void OnIdleTimeChanged();
    partial void OnOfflineTimeChanging(long value);
    partial void OnOfflineTimeChanged();
    partial void OnUnavailableTimeChanging(long value);
    partial void OnUnavailableTimeChanged();
    partial void OnSlaveStateChanging(global::HeuristicLab.Services.Hive.DataAccess.SlaveState value);
    partial void OnSlaveStateChanged();
    partial void OnIsAllowedToCalculateChanging(bool value);
    partial void OnIsAllowedToCalculateChanged();
    #endregion
		
		public FactClientInfo()
		{
			this._DimClient = default(EntityRef<DimClient>);
			this._DimTime = default(EntityRef<DimTime>);
			this._DimUser = default(EntityRef<DimUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._DimClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					if (this._DimTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._DimUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumUsedCores", DbType="Int NOT NULL")]
		public int NumUsedCores
		{
			get
			{
				return this._NumUsedCores;
			}
			set
			{
				if ((this._NumUsedCores != value))
				{
					this.OnNumUsedCoresChanging(value);
					this.SendPropertyChanging();
					this._NumUsedCores = value;
					this.SendPropertyChanged("NumUsedCores");
					this.OnNumUsedCoresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumTotalCores", DbType="Int NOT NULL")]
		public int NumTotalCores
		{
			get
			{
				return this._NumTotalCores;
			}
			set
			{
				if ((this._NumTotalCores != value))
				{
					this.OnNumTotalCoresChanging(value);
					this.SendPropertyChanging();
					this._NumTotalCores = value;
					this.SendPropertyChanged("NumTotalCores");
					this.OnNumTotalCoresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsedMemory", DbType="Int NOT NULL")]
		public int UsedMemory
		{
			get
			{
				return this._UsedMemory;
			}
			set
			{
				if ((this._UsedMemory != value))
				{
					this.OnUsedMemoryChanging(value);
					this.SendPropertyChanging();
					this._UsedMemory = value;
					this.SendPropertyChanged("UsedMemory");
					this.OnUsedMemoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalMemory", DbType="Int NOT NULL")]
		public int TotalMemory
		{
			get
			{
				return this._TotalMemory;
			}
			set
			{
				if ((this._TotalMemory != value))
				{
					this.OnTotalMemoryChanging(value);
					this.SendPropertyChanging();
					this._TotalMemory = value;
					this.SendPropertyChanged("TotalMemory");
					this.OnTotalMemoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CpuUtilization", DbType="Float NOT NULL")]
		public double CpuUtilization
		{
			get
			{
				return this._CpuUtilization;
			}
			set
			{
				if ((this._CpuUtilization != value))
				{
					this.OnCpuUtilizationChanging(value);
					this.SendPropertyChanging();
					this._CpuUtilization = value;
					this.SendPropertyChanged("CpuUtilization");
					this.OnCpuUtilizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTimeIdle", DbType="INT NOT NULL")]
		public long IdleTime
		{
			get
			{
				return this._TotalTimeIdle;
			}
			set
			{
				if ((this._TotalTimeIdle != value))
				{
					this.OnIdleTimeChanging(value);
					this.SendPropertyChanging();
					this._TotalTimeIdle = value;
					this.SendPropertyChanged("IdleTime");
					this.OnIdleTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTimeOffline", DbType="INT NOT NULL")]
		public long OfflineTime
		{
			get
			{
				return this._TotalTimeOffline;
			}
			set
			{
				if ((this._TotalTimeOffline != value))
				{
					this.OnOfflineTimeChanging(value);
					this.SendPropertyChanging();
					this._TotalTimeOffline = value;
					this.SendPropertyChanged("OfflineTime");
					this.OnOfflineTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTimeUnavailable", DbType="INT NOT NULL")]
		public long UnavailableTime
		{
			get
			{
				return this._TotalTimeUnavailable;
			}
			set
			{
				if ((this._TotalTimeUnavailable != value))
				{
					this.OnUnavailableTimeChanging(value);
					this.SendPropertyChanging();
					this._TotalTimeUnavailable = value;
					this.SendPropertyChanged("UnavailableTime");
					this.OnUnavailableTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlaveState", DbType="VarChar(15)", CanBeNull=false)]
		public global::HeuristicLab.Services.Hive.DataAccess.SlaveState SlaveState
		{
			get
			{
				return this._SlaveState;
			}
			set
			{
				if ((this._SlaveState != value))
				{
					this.OnSlaveStateChanging(value);
					this.SendPropertyChanging();
					this._SlaveState = value;
					this.SendPropertyChanged("SlaveState");
					this.OnSlaveStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAllowedToCalculate", DbType="BIT")]
		public bool IsAllowedToCalculate
		{
			get
			{
				return this._IsAllowedToCalculate;
			}
			set
			{
				if ((this._IsAllowedToCalculate != value))
				{
					this.OnIsAllowedToCalculateChanging(value);
					this.SendPropertyChanging();
					this._IsAllowedToCalculate = value;
					this.SendPropertyChanged("IsAllowedToCalculate");
					this.OnIsAllowedToCalculateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimClient_FactClientInfo", Storage="_DimClient", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public DimClient DimClient
		{
			get
			{
				return this._DimClient.Entity;
			}
			set
			{
				DimClient previousValue = this._DimClient.Entity;
				if (((previousValue != value) 
							|| (this._DimClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimClient.Entity = null;
						previousValue.FactClientInfos.Remove(this);
					}
					this._DimClient.Entity = value;
					if ((value != null))
					{
						value.FactClientInfos.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(System.Guid);
					}
					this.SendPropertyChanged("DimClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTime_FactClientInfo", Storage="_DimTime", ThisKey="Time", OtherKey="Time", IsForeignKey=true)]
		public DimTime DimTime
		{
			get
			{
				return this._DimTime.Entity;
			}
			set
			{
				DimTime previousValue = this._DimTime.Entity;
				if (((previousValue != value) 
							|| (this._DimTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTime.Entity = null;
						previousValue.FactClientInfos.Remove(this);
					}
					this._DimTime.Entity = value;
					if ((value != null))
					{
						value.FactClientInfos.Add(this);
						this._Time = value.Time;
					}
					else
					{
						this._Time = default(System.DateTime);
					}
					this.SendPropertyChanged("DimTime");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUser_FactClientInfo", Storage="_DimUser", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public DimUser DimUser
		{
			get
			{
				return this._DimUser.Entity;
			}
			set
			{
				DimUser previousValue = this._DimUser.Entity;
				if (((previousValue != value) 
							|| (this._DimUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUser.Entity = null;
						previousValue.FactClientInfos.Remove(this);
					}
					this._DimUser.Entity = value;
					if ((value != null))
					{
						value.FactClientInfos.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("DimUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
